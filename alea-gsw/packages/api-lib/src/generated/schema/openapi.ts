/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/image-requests": {
    /**
     * Get all image request
     * @description Get all image request
     */
    get: operations["getImageRequests"];
    /**
     * Create a image request
     * @description Create a image request
     */
    post: operations["addImageRequest"];
  };
  "/image-request/{imageRequestId}": {
    /**
     * Get a image request
     * @description Get a image request
     */
    get: operations["getImageRequest"];
    /**
     * Delete a image request
     * @description Delete a image request
     */
    delete: operations["deleteImageRequest"];
    /**
     * Patch a image request
     * @description Patch a image request
     */
    patch: operations["patchImageRequest"];
  };
  "/image-request/{imageRequestId}/initialPreviewImage": {
    /**
     * Get the initialPreviewImage image of the image request
     * @description Get the initialPreviewImage image of the image request
     */
    get: operations["getImageRequestInitialPreviewImage"];
  };
  "/image-request/preview": {
    /**
     * Get the preview image of the image request
     * @description Get the preview image of the image request
     */
    get: operations["getImageRequestPreview"];
  };
  "/locationTracks": {
    /**
     * Create a location track
     * @description Create a location track
     */
    post: operations["addLocationTrack"];
  };
  "/locationTrack/{locationTrackId}": {
    /**
     * Get a location track
     * @description Get a location track
     */
    get: operations["getLocationTrack"];
  };
  "/webhooks/update-location-track": {
    /**
     * Update the location track from new data
     * @description Update the location track from new data
     */
    post: operations["webhookUpdateLocationTrack"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ImageRequestImage: {
      id: string;
      imageId: string | null;
      placeholderId: string | null;
    };
    ImageRequest: WithRequired<({
      locationTrack: components["schemas"]["LocationTrack"];
      thumbnail: components["schemas"]["ImageRequestImage"] | null;
      initialPreviewImage: components["schemas"]["ImageRequestImage"] | null;
      finalPreviewImage: components["schemas"]["ImageRequestImage"] | null;
      image: components["schemas"]["ImageRequestImage"] | null;
    }) & components["schemas"]["OptionalImageRequest"], "id" | "userId" | "name" | "description" | "locationTrackId" | "satelliteRotationX" | "satelliteRotationY" | "satelliteRotationZ" | "AROgroundStationId" | "AROgroundStationPassId" | "reviewerId" | "approved" | "reviewComment" | "initialPreviewImageId" | "finalPreviewImageId" | "locationTrack" | "thumbnail" | "initialPreviewImage" | "finalPreviewImage" | "image">;
    OptionalImageRequest: {
      id?: string;
      userId?: string;
      name?: string;
      description?: string;
      locationTrackId?: string;
      satelliteRotationX?: number;
      satelliteRotationY?: number;
      satelliteRotationZ?: number;
      AROgroundStationId?: number | null;
      AROgroundStationPassId?: string | null;
      reviewerId?: string | null;
      approved?: boolean | null;
      reviewComment?: string | null;
      initialPreviewImageId?: string | null;
      finalPreviewImageId?: string | null;
    };
    CreateImageRequestParameter: {
      name: string;
      description: string;
      satelliteLocationLat: number;
      satelliteLocationLng: number;
      /** Format: date-time */
      satelliteLocationT: string;
      satelliteRotationX: number;
      satelliteRotationY: number;
      satelliteRotationZ: number;
      AROgroundStationId: number | null;
      AROgroundStationPassRise: string | null;
      AROgroundStationPassSet: string | null;
    };
    ImageRequestVaildationError: {
      pass: {
        commandTimeCollide: boolean;
        insufficientMemory: boolean;
      };
      image: {
        invalidFraming: boolean;
        commandTimeCollide: boolean;
      };
      ARO: {
        passTimeCollide: boolean;
        unauthorizedGroundStation: boolean;
      };
    };
    Location: {
      lat: number;
      lng: number;
      alt: number;
      /** Format: date-time */
      t: string;
      stateElementId: string | null;
    };
    LocationTrack: {
      id: string;
      initialLocation: components["schemas"]["Location"];
      currentLocation: components["schemas"]["Location"];
      finalLocation: components["schemas"]["Location"] | null;
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all image request
   * @description Get all image request
   */
  getImageRequests: {
    parameters: {
      query?: {
        /** @description Owner of image request */
        owner?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ImageRequest"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Create a image request
   * @description Create a image request
   */
  addImageRequest: {
    /** @description The ImageRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateImageRequestParameter"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ImageRequest"];
        };
      };
      /** @description The request has failed. */
      400: {
        content: {
          "application/json": components["schemas"]["ImageRequestVaildationError"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get a image request
   * @description Get a image request
   */
  getImageRequest: {
    parameters: {
      path: {
        /** @description The Id of the image request */
        imageRequestId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ImageRequest"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Delete a image request
   * @description Delete a image request
   */
  deleteImageRequest: {
    parameters: {
      path: {
        /** @description The Id of the image request */
        imageRequestId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "text/plain": string;
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Patch a image request
   * @description Patch a image request
   */
  patchImageRequest: {
    parameters: {
      path: {
        /** @description The Id of the image request */
        imageRequestId: string;
      };
    };
    /** @description The ImageRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OptionalImageRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      400: {
        content: {
          "application/json": components["schemas"]["ImageRequestVaildationError"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get the initialPreviewImage image of the image request
   * @description Get the initialPreviewImage image of the image request
   */
  getImageRequestInitialPreviewImage: {
    parameters: {
      path: {
        /** @description The Id of the image request */
        imageRequestId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "plain/text": string;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get the preview image of the image request
   * @description Get the preview image of the image request
   */
  getImageRequestPreview: {
    parameters: {
      query: {
        /** @description The latitude of the satellite */
        SatLat: number;
        /** @description The longitude of the satellite */
        SatLng: number;
        /** @description The altitude of the satellite from ground */
        SatAlt: number;
        /** @description The X component of the satellite rotation/orientation */
        SatRotX: number;
        /** @description The Y component of the satellite rotation/orientation */
        SatRotY: number;
        /** @description The Z component of the satellite rotation/orientation */
        SatRotZ: number;
        /** @description Generate base64 encoded image. Default false return jpg image */
        base64?: boolean;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            base64: string;
          };
          "image/jpg": string;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Create a location track
   * @description Create a location track
   */
  addLocationTrack: {
    /** @description The location to track */
    requestBody: {
      content: {
        "application/json": {
          lat: number;
          lng: number;
          /** Format: date-time */
          t: string;
        };
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["LocationTrack"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get a location track
   * @description Get a location track
   */
  getLocationTrack: {
    parameters: {
      path: {
        /** @description The Id of the location track */
        locationTrackId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["LocationTrack"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Update the location track from new data
   * @description Update the location track from new data
   */
  webhookUpdateLocationTrack: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
}
