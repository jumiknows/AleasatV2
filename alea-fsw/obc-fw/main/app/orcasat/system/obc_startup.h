/*
 * These functions will be called in sys_startup so that we can preserve startup flags.
 * This allows us to determine, for example, that we restarted due to a watchdog or a reset button
 * push.
 *
 * To get this working, we place #defines in the correct user code locations so that HALCoGen can
 * regenerate the code without wiping our code out, and we can then rearrange chunks of code that
 * are originally generated by halcogen.
 *
 * In particular, we have to check the reset source AFTER running the RAM self tests, as these tests
 * destroy everything in memory.
 */

#ifndef OBC_STARTUP_H_
#define OBC_STARTUP_H_

#include "obc_utils.h"
#include "sys_common.h"
#include "system.h"
#include "sys_selftest.h"
#include "reg_can.h"

#define OBC_STARTUP_METHOD 1 // if 1, we do our method.
#define ORCA_LOG_PBIST_FAILS_CHUNK_1 \
    1 // if 1, execute the first chunk of PBIST result logging (required because TI's user code \
    // sections are awkwardly placed)

/* Functions */
void startup_init(void);
void startup_check(void); /* Modified startup routine from HALCoGEN with hooks for monitoring status */
void print_startup_type(void);
void log_PBIST_fails(void);  /* checker for PBIST failure, triggers a single reset upon failure */
void obc_startup_logs(void); /* log various things at startup */

void save_PBIST_passed(uint8_t test_num);
void save_PBIST_failed(uint8_t test_num);

#endif /* OBC_STARTUP_H_ */
