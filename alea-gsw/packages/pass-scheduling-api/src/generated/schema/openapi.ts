/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/ground-stations": {
    /**
     * Get all ground station
     * @description Get all ground station
     */
    get: operations["getGroundStations"];
    /**
     * Create a ground station
     * @description Create a ground station
     */
    post: operations["addGroundStation"];
  };
  "/ground-station/{groundStationId}": {
    /**
     * Get a ground station
     * @description Get a ground station
     */
    get: operations["getGroundStation"];
    /**
     * Delete a ground station
     * @description Delete a ground station
     */
    delete: operations["deleteGroundStation"];
    /**
     * Patch a ground station
     * @description Patch a ground station
     */
    patch: operations["patchGroundStation"];
  };
  "/mission-queue": {
    /**
     * Get missions in queue
     * @description Get missions in queue
     */
    get: operations["getQueuedMissions"];
    /**
     * Queue a mission
     * @description Queue a mission
     */
    post: operations["queueMission"];
  };
  "/mission-schedule/missions": {
    /**
     * Get scheduled missions
     * @description Get scheduled missions
     */
    get: operations["getScheduledMissions"];
  };
  "/mission-schedule/missions/{missionId}": {
    /**
     * Get a scheduled mission
     * @description Get a scheduled mission
     */
    get: operations["getScheduledMission"];
  };
  "/mission-schedule/spaces": {
    /**
     * Get schedule spaces
     * @description Get schedule spaces
     */
    get: operations["getScheduleSpaces"];
  };
  "/webhooks/new-orbit-propagation": {
    /**
     * Find information of the pass
     * @description Find information of the pass by time
     */
    post: operations["webhooksNewOrbitPropagation"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Passes: {
      latitude: number;
      longitude: number;
      passes: {
          /** @example 10 */
          id: number;
          /** Format: date-time */
          rise: string;
          /** Format: date-time */
          set: string;
          culmination: {
            /** Format: date-time */
            t: string;
            /** @example 40.5 */
            alt: number;
            /** @example 263.15 */
            az: number;
            /** @example 45 */
            lat: number;
            /** @example -125 */
            lng: number;
            /** @example 432 */
            height: number;
          };
        }[];
    };
    Pass: {
      ground_track: number[][];
    };
    GroundStationCreate: WithRequired<components["schemas"]["GroundStationOptional"], "name" | "description" | "lat" | "lng" | "minElevation">;
    GroundStation: WithRequired<components["schemas"]["GroundStationOptional"], "id" | "name" | "description" | "lat" | "lng" | "minElevation" | "ownerId" | "aleasat">;
    GroundStationOptional: {
      id?: number;
      name?: string;
      description?: string;
      lat?: number;
      lng?: number;
      minElevation?: number;
      ownerId?: string | null;
      aleasat?: boolean;
    };
    PassSchedulingMissionReadOnly: components["schemas"]["PassSchedulingMission"] & {
      commands: components["schemas"]["PassSchedulingCommandReadOnly"][];
    };
    PassSchedulingMissionWriteOnly: components["schemas"]["PassSchedulingMission"] & {
      commands: components["schemas"]["PassSchedulingCommand"][];
    };
    PassSchedulingMission: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      scheduledAt: string | null;
    };
    PassSchedulingCommandReadOnly: components["schemas"]["PassSchedulingCommand"] & ({
      /** Format: date-time */
      scheduledAt: string | null;
    });
    PassSchedulingCommand: {
      /** Format: uuid */
      id: string;
      sequenceNumber: number;
      commandId: number;
      commandName: string;
      timeOffset: number;
    };
    ReadMissionQueueMission: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      queueAt: string;
      /** Format: uuid */
      missionId: string;
    };
    ReadMissionScheduleMission: {
      /** Format: uuid */
      id?: string;
      /** @enum {string} */
      status?: "queued" | "expired" | "scheduled" | "sent";
      /** Format: date-time */
      scheduledAt?: string | null;
      schedule?: {
        /** Format: uuid */
        id: string;
        /** Format: date-time */
        initialOverheadStart: string;
        /** Format: date-time */
        missionStart: string;
        /** Format: date-time */
        missionEnd: string;
        /** Format: date-time */
        directOverheadEnd: string;
        /** Format: date-time */
        indirectOverheadEnd: string;
      } | null;
      commands?: (components["schemas"]["PassSchedulingCommand"] & ({
          schedule: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            start: string;
            /** Format: date-time */
            end: string;
            /** Format: date-time */
            overheadEnd: string;
          } | null;
        }))[];
    };
    ReadMissionScheduleSpace: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string | null;
      duration: number;
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all ground station
   * @description Get all ground station
   */
  getGroundStations: {
    parameters: {
      query?: {
        /** @description Owner of ground station */
        ownerId?: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GroundStation"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Create a ground station
   * @description Create a ground station
   */
  addGroundStation: {
    /** @description The GroundStation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroundStationCreate"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GroundStation"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get a ground station
   * @description Get a ground station
   */
  getGroundStation: {
    parameters: {
      path: {
        /** @description The Id of the ground station */
        groundStationId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GroundStation"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Delete a ground station
   * @description Delete a ground station
   */
  deleteGroundStation: {
    parameters: {
      path: {
        /** @description The Id of the ground station */
        groundStationId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "text/plain": string;
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Patch a ground station
   * @description Patch a ground station
   */
  patchGroundStation: {
    parameters: {
      path: {
        /** @description The Id of the ground station */
        groundStationId: string;
      };
    };
    /** @description The GroundStation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroundStationOptional"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get missions in queue
   * @description Get missions in queue
   */
  getQueuedMissions: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMissionQueueMission"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Queue a mission
   * @description Queue a mission
   */
  queueMission: {
    /** @description The Mission to queue */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PassSchedulingMissionWriteOnly"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "text/plain": string;
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get scheduled missions
   * @description Get scheduled missions
   */
  getScheduledMissions: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMissionScheduleMission"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get a scheduled mission
   * @description Get a scheduled mission
   */
  getScheduledMission: {
    parameters: {
      path: {
        /** @description The Id of the mission */
        missionId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMissionScheduleMission"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Get schedule spaces
   * @description Get schedule spaces
   */
  getScheduleSpaces: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMissionScheduleSpace"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Find information of the pass
   * @description Find information of the pass by time
   */
  webhooksNewOrbitPropagation: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
}
