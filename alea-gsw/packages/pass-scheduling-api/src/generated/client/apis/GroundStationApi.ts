/* tslint:disable */
/* eslint-disable */
/**
 * Pass Scheduling
 * abcd
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GroundStation,
  GroundStationCreate,
  GroundStationOptional,
  Problem,
} from '../models/index.js';
import {
    GroundStationFromJSON,
    GroundStationToJSON,
    GroundStationCreateFromJSON,
    GroundStationCreateToJSON,
    GroundStationOptionalFromJSON,
    GroundStationOptionalToJSON,
    ProblemFromJSON,
    ProblemToJSON,
} from '../models/index.js';

export interface AddGroundStationRequest {
    groundStationCreate: GroundStationCreate;
}

export interface DeleteGroundStationRequest {
    groundStationId: string;
}

export interface GetGroundStationRequest {
    groundStationId: string;
}

export interface GetGroundStationsRequest {
    ownerId?: string;
}

export interface PatchGroundStationRequest {
    groundStationId: string;
    groundStationOptional: GroundStationOptional;
}

/**
 * 
 */
export class GroundStationApi extends runtime.BaseAPI {

    /**
     * Create a ground station
     * Create a ground station
     */
    async addGroundStationRaw(requestParameters: AddGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroundStation>> {
        if (requestParameters['groundStationCreate'] == null) {
            throw new runtime.RequiredError(
                'groundStationCreate',
                'Required parameter "groundStationCreate" was null or undefined when calling addGroundStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ground-stations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroundStationCreateToJSON(requestParameters['groundStationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroundStationFromJSON(jsonValue));
    }

    /**
     * Create a ground station
     * Create a ground station
     */
    async addGroundStation(requestParameters: AddGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroundStation> {
        const response = await this.addGroundStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a ground station
     * Delete a ground station
     */
    async deleteGroundStationRaw(requestParameters: DeleteGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['groundStationId'] == null) {
            throw new runtime.RequiredError(
                'groundStationId',
                'Required parameter "groundStationId" was null or undefined when calling deleteGroundStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ground-station/{groundStationId}`.replace(`{${"groundStationId"}}`, encodeURIComponent(String(requestParameters['groundStationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a ground station
     * Delete a ground station
     */
    async deleteGroundStation(requestParameters: DeleteGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteGroundStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a ground station
     * Get a ground station
     */
    async getGroundStationRaw(requestParameters: GetGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroundStation>> {
        if (requestParameters['groundStationId'] == null) {
            throw new runtime.RequiredError(
                'groundStationId',
                'Required parameter "groundStationId" was null or undefined when calling getGroundStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ground-station/{groundStationId}`.replace(`{${"groundStationId"}}`, encodeURIComponent(String(requestParameters['groundStationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroundStationFromJSON(jsonValue));
    }

    /**
     * Get a ground station
     * Get a ground station
     */
    async getGroundStation(requestParameters: GetGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroundStation> {
        const response = await this.getGroundStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all ground station
     * Get all ground station
     */
    async getGroundStationsRaw(requestParameters: GetGroundStationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroundStation>>> {
        const queryParameters: any = {};

        if (requestParameters['ownerId'] != null) {
            queryParameters['ownerId'] = requestParameters['ownerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ground-stations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroundStationFromJSON));
    }

    /**
     * Get all ground station
     * Get all ground station
     */
    async getGroundStations(requestParameters: GetGroundStationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroundStation>> {
        const response = await this.getGroundStationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch a ground station
     * Patch a ground station
     */
    async patchGroundStationRaw(requestParameters: PatchGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['groundStationId'] == null) {
            throw new runtime.RequiredError(
                'groundStationId',
                'Required parameter "groundStationId" was null or undefined when calling patchGroundStation().'
            );
        }

        if (requestParameters['groundStationOptional'] == null) {
            throw new runtime.RequiredError(
                'groundStationOptional',
                'Required parameter "groundStationOptional" was null or undefined when calling patchGroundStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ground-station/{groundStationId}`.replace(`{${"groundStationId"}}`, encodeURIComponent(String(requestParameters['groundStationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroundStationOptionalToJSON(requestParameters['groundStationOptional']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Patch a ground station
     * Patch a ground station
     */
    async patchGroundStation(requestParameters: PatchGroundStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.patchGroundStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
