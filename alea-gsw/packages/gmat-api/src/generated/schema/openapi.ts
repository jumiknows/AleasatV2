/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/gmat/orbit-propagation": {
    /**
     * Find passes of the target location
     * @description Find passes of the target location by time and location
     */
    get: operations["getGmatOrbitPropagation"];
    /**
     * Find passes of the target location
     * @description Find passes of the target location by time and location
     */
    put: operations["updateGmatOrbitPropagation"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SatelliteState: {
      /** @enum {string} */
      epochFormat: "UTCGregorian";
      epoch: string;
      /** @enum {string} */
      coordinateSystem: "EarthMJ2000Eq" | "EarthMJ2000Ec";
      stateElement: components["schemas"]["StateElement"];
      stateId: string;
    };
    StateElement: components["schemas"]["CartesianState"] | components["schemas"]["KeplerianState"];
    CartesianState: {
      /** @enum {string} */
      type: "cartesian";
      x: number;
      y: number;
      z: number;
      vx: number;
      vy: number;
      vz: number;
    };
    KeplerianState: {
      /** @enum {string} */
      type: "keplerian";
      sma: number;
      ecc: number;
      inc: number;
      raan: number;
      aop: number;
      ta: number;
    };
    GmatOrbitPropagation: {
      stateElement: components["schemas"]["StateElement"];
      stateId: string;
      result: {
          utcGregorian: number;
          x: number;
          y: number;
          z: number;
        }[];
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Find passes of the target location
   * @description Find passes of the target location by time and location
   */
  getGmatOrbitPropagation: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["GmatOrbitPropagation"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Find passes of the target location
   * @description Find passes of the target location by time and location
   */
  updateGmatOrbitPropagation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SatelliteState"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: never;
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
}
