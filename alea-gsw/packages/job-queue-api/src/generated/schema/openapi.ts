/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/jobs/gmat": {
    /** Create and queue a GMAT job */
    post: operations["createGMATJob"];
  };
  "/jobs/gmat/{jobId}": {
    /** Get details for a GMAT job */
    get: operations["getGMATJob"];
  };
  "/jobs/orbit-propagation": {
    /** Create and queue an orbit propagation job */
    post: operations["createOrbitJob"];
  };
  "/jobs/orbit-propagation/{jobId}": {
    /** Get details for an orbit propagation job */
    get: operations["getOrbitJob"];
  };
  "/jobs/{jobId}": {
    /** Delete a job by ID */
    delete: operations["deleteJob"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ReadGMATJob: {
      id: string;
      status: string;
      requestData: components["schemas"]["SatelliteState"];
      resultData?: components["schemas"]["GMATResult"];
    };
    SatelliteState: {
      /** @enum {string} */
      epochFormat: "UTCGregorian";
      epoch: string;
      /** @enum {string} */
      coordinateSystem: "EarthMJ2000Eq" | "EarthMJ2000Ec";
      stateElement: components["schemas"]["StateElement"];
      stateId: string;
    };
    StateElement: components["schemas"]["CartesianState"] | components["schemas"]["KeplerianState"];
    CartesianState: {
      /** @enum {string} */
      type: "cartesian";
      x: number;
      y: number;
      z: number;
      vx: number;
      vy: number;
      vz: number;
    };
    KeplerianState: {
      /** @enum {string} */
      type: "keplerian";
      sma: number;
      ecc: number;
      inc: number;
      raan: number;
      aop: number;
      ta: number;
    };
    ReadOrbitPropagationJob: {
      id: string;
      status: string;
      requestData: components["schemas"]["PropagationParams"];
      resultData?: components["schemas"]["OrbitPropagationResult"];
    };
    PropagationParams: {
      tleLine1: string;
      tleLine2: string;
      simulationTime: number;
    };
    GMATResult: {
      result: components["schemas"]["S3Result"];
    };
    OrbitPropagationResult: {
      result: number[];
    };
    S3Result: {
      bucket: string;
      key: string;
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Create and queue a GMAT job */
  createGMATJob: {
    /** @description New GMAT job object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SatelliteState"];
      };
    };
    responses: {
      /** @description A job */
      200: {
        content: {
          "application/json": components["schemas"]["ReadGMATJob"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Get details for a GMAT job */
  getGMATJob: {
    parameters: {
      path: {
        /** @description The job ID */
        jobId: string;
      };
    };
    responses: {
      /** @description A job */
      200: {
        content: {
          "application/json": components["schemas"]["ReadGMATJob"];
        };
      };
      /** @description Job not found */
      404: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Create and queue an orbit propagation job */
  createOrbitJob: {
    /** @description New orbit propagation job object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropagationParams"];
      };
    };
    responses: {
      /** @description A job */
      200: {
        content: {
          "application/json": components["schemas"]["ReadOrbitPropagationJob"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Get details for an orbit propagation job */
  getOrbitJob: {
    parameters: {
      path: {
        /** @description The job ID */
        jobId: string;
      };
    };
    responses: {
      /** @description A job */
      200: {
        content: {
          "application/json": components["schemas"]["ReadOrbitPropagationJob"];
        };
      };
      /** @description Job not found */
      404: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /** Delete a job by ID */
  deleteJob: {
    parameters: {
      path: {
        /** @description The job ID */
        jobId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "text/plain": string;
          "application/json": Record<string, never>;
        };
      };
      /** @description Job not found in waiting queue */
      404: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
      /** @description Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["Problem"];
        };
      };
    };
  };
}
