# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import alea.obc_grpc.generated.obc_pb2 as obc__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in obc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class obcStub(object):
    """Reminder: NO float only double, due to node floating point precision (IEEE 754 double precision)
    field name cant be https://github.com/protocolbuffers/protobuf-javascript/blob/main/generator/js_generator.cc#L60-L73

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.log = channel.unary_stream(
                '/obc/log',
                request_serializer=obc__pb2.log_args.SerializeToString,
                response_deserializer=obc__pb2.log_response.FromString,
                _registered_method=True)
        self.reset = channel.unary_unary(
                '/obc/reset',
                request_serializer=obc__pb2.reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_reset = channel.unary_stream(
                '/obc/schedule_reset',
                request_serializer=obc__pb2.reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.ping = channel.unary_unary(
                '/obc/ping',
                request_serializer=obc__pb2.ping_command_args.SerializeToString,
                response_deserializer=obc__pb2.ping_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_ping = channel.unary_stream(
                '/obc/schedule_ping',
                request_serializer=obc__pb2.ping_command_args.SerializeToString,
                response_deserializer=obc__pb2.ping_command_OBCResponse.FromString,
                _registered_method=True)
        self.get_time = channel.unary_unary(
                '/obc/get_time',
                request_serializer=obc__pb2.get_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_get_time = channel.unary_stream(
                '/obc/schedule_get_time',
                request_serializer=obc__pb2.get_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.set_time = channel.unary_unary(
                '/obc/set_time',
                request_serializer=obc__pb2.set_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.set_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_set_time = channel.unary_stream(
                '/obc/schedule_set_time',
                request_serializer=obc__pb2.set_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.set_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.get_min_stack_space = channel.unary_unary(
                '/obc/get_min_stack_space',
                request_serializer=obc__pb2.get_min_stack_space_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_min_stack_space_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_get_min_stack_space = channel.unary_stream(
                '/obc/schedule_get_min_stack_space',
                request_serializer=obc__pb2.get_min_stack_space_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_min_stack_space_command_OBCResponse.FromString,
                _registered_method=True)
        self.capture_rtos_trace = channel.unary_unary(
                '/obc/capture_rtos_trace',
                request_serializer=obc__pb2.capture_rtos_trace_command_args.SerializeToString,
                response_deserializer=obc__pb2.capture_rtos_trace_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_capture_rtos_trace = channel.unary_stream(
                '/obc/schedule_capture_rtos_trace',
                request_serializer=obc__pb2.capture_rtos_trace_command_args.SerializeToString,
                response_deserializer=obc__pb2.capture_rtos_trace_command_OBCResponse.FromString,
                _registered_method=True)
        self.rtos_state = channel.unary_unary(
                '/obc/rtos_state',
                request_serializer=obc__pb2.rtos_state_command_args.SerializeToString,
                response_deserializer=obc__pb2.rtos_state_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_rtos_state = channel.unary_stream(
                '/obc/schedule_rtos_state',
                request_serializer=obc__pb2.rtos_state_command_args.SerializeToString,
                response_deserializer=obc__pb2.rtos_state_command_OBCResponse.FromString,
                _registered_method=True)
        self.low_power = channel.unary_unary(
                '/obc/low_power',
                request_serializer=obc__pb2.low_power_command_args.SerializeToString,
                response_deserializer=obc__pb2.low_power_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_low_power = channel.unary_stream(
                '/obc/schedule_low_power',
                request_serializer=obc__pb2.low_power_command_args.SerializeToString,
                response_deserializer=obc__pb2.low_power_command_OBCResponse.FromString,
                _registered_method=True)
        self.sys_time = channel.unary_unary(
                '/obc/sys_time',
                request_serializer=obc__pb2.sys_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.sys_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_sys_time = channel.unary_stream(
                '/obc/schedule_sys_time',
                request_serializer=obc__pb2.sys_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.sys_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.cpu_usage = channel.unary_unary(
                '/obc/cpu_usage',
                request_serializer=obc__pb2.cpu_usage_command_args.SerializeToString,
                response_deserializer=obc__pb2.cpu_usage_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_cpu_usage = channel.unary_stream(
                '/obc/schedule_cpu_usage',
                request_serializer=obc__pb2.cpu_usage_command_args.SerializeToString,
                response_deserializer=obc__pb2.cpu_usage_command_OBCResponse.FromString,
                _registered_method=True)
        self.task_runtime = channel.unary_unary(
                '/obc/task_runtime',
                request_serializer=obc__pb2.task_runtime_command_args.SerializeToString,
                response_deserializer=obc__pb2.task_runtime_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_task_runtime = channel.unary_stream(
                '/obc/schedule_task_runtime',
                request_serializer=obc__pb2.task_runtime_command_args.SerializeToString,
                response_deserializer=obc__pb2.task_runtime_command_OBCResponse.FromString,
                _registered_method=True)
        self.gpio_exp_reset = channel.unary_unary(
                '/obc/gpio_exp_reset',
                request_serializer=obc__pb2.gpio_exp_reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.gpio_exp_reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gpio_exp_reset = channel.unary_stream(
                '/obc/schedule_gpio_exp_reset',
                request_serializer=obc__pb2.gpio_exp_reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.gpio_exp_reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.i2c_reset = channel.unary_unary(
                '/obc/i2c_reset',
                request_serializer=obc__pb2.i2c_reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.i2c_reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_i2c_reset = channel.unary_stream(
                '/obc/schedule_i2c_reset',
                request_serializer=obc__pb2.i2c_reset_command_args.SerializeToString,
                response_deserializer=obc__pb2.i2c_reset_command_OBCResponse.FromString,
                _registered_method=True)
        self.heartbeat = channel.unary_unary(
                '/obc/heartbeat',
                request_serializer=obc__pb2.heartbeat_command_args.SerializeToString,
                response_deserializer=obc__pb2.heartbeat_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_heartbeat = channel.unary_stream(
                '/obc/schedule_heartbeat',
                request_serializer=obc__pb2.heartbeat_command_args.SerializeToString,
                response_deserializer=obc__pb2.heartbeat_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_restart = channel.unary_unary(
                '/obc/gps_restart',
                request_serializer=obc__pb2.gps_restart_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_restart_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_restart = channel.unary_stream(
                '/obc/schedule_gps_restart',
                request_serializer=obc__pb2.gps_restart_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_restart_command_OBCResponse.FromString,
                _registered_method=True)
        self.fw_info = channel.unary_unary(
                '/obc/fw_info',
                request_serializer=obc__pb2.fw_info_command_args.SerializeToString,
                response_deserializer=obc__pb2.fw_info_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_fw_info = channel.unary_stream(
                '/obc/schedule_fw_info',
                request_serializer=obc__pb2.fw_info_command_args.SerializeToString,
                response_deserializer=obc__pb2.fw_info_command_OBCResponse.FromString,
                _registered_method=True)
        self.wmm_init = channel.unary_unary(
                '/obc/wmm_init',
                request_serializer=obc__pb2.wmm_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_wmm_init = channel.unary_stream(
                '/obc/schedule_wmm_init',
                request_serializer=obc__pb2.wmm_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.wmm_is_init = channel.unary_unary(
                '/obc/wmm_is_init',
                request_serializer=obc__pb2.wmm_is_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_is_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_wmm_is_init = channel.unary_stream(
                '/obc/schedule_wmm_is_init',
                request_serializer=obc__pb2.wmm_is_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_is_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.wmm_get_mag_ref = channel.unary_unary(
                '/obc/wmm_get_mag_ref',
                request_serializer=obc__pb2.wmm_get_mag_ref_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_get_mag_ref_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_wmm_get_mag_ref = channel.unary_stream(
                '/obc/schedule_wmm_get_mag_ref',
                request_serializer=obc__pb2.wmm_get_mag_ref_command_args.SerializeToString,
                response_deserializer=obc__pb2.wmm_get_mag_ref_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_query_sw_ver = channel.unary_unary(
                '/obc/gps_query_sw_ver',
                request_serializer=obc__pb2.gps_query_sw_ver_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_sw_ver_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_query_sw_ver = channel.unary_stream(
                '/obc/schedule_gps_query_sw_ver',
                request_serializer=obc__pb2.gps_query_sw_ver_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_sw_ver_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_set_factory_settings = channel.unary_unary(
                '/obc/gps_set_factory_settings',
                request_serializer=obc__pb2.gps_set_factory_settings_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_set_factory_settings_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_set_factory_settings = channel.unary_stream(
                '/obc/schedule_gps_set_factory_settings',
                request_serializer=obc__pb2.gps_set_factory_settings_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_set_factory_settings_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_configure_power_mode = channel.unary_unary(
                '/obc/gps_configure_power_mode',
                request_serializer=obc__pb2.gps_configure_power_mode_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_power_mode_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_configure_power_mode = channel.unary_stream(
                '/obc/schedule_gps_configure_power_mode',
                request_serializer=obc__pb2.gps_configure_power_mode_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_power_mode_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_query_power_mode = channel.unary_unary(
                '/obc/gps_query_power_mode',
                request_serializer=obc__pb2.gps_query_power_mode_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_power_mode_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_query_power_mode = channel.unary_stream(
                '/obc/schedule_gps_query_power_mode',
                request_serializer=obc__pb2.gps_query_power_mode_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_power_mode_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_query_sw_crc = channel.unary_unary(
                '/obc/gps_query_sw_crc',
                request_serializer=obc__pb2.gps_query_sw_crc_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_sw_crc_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_query_sw_crc = channel.unary_stream(
                '/obc/schedule_gps_query_sw_crc',
                request_serializer=obc__pb2.gps_query_sw_crc_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_sw_crc_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_configure_position_upate_rate = channel.unary_unary(
                '/obc/gps_configure_position_upate_rate',
                request_serializer=obc__pb2.gps_configure_position_upate_rate_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_configure_position_upate_rate = channel.unary_stream(
                '/obc/schedule_gps_configure_position_upate_rate',
                request_serializer=obc__pb2.gps_configure_position_upate_rate_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_query_position_update_rate = channel.unary_unary(
                '/obc/gps_query_position_update_rate',
                request_serializer=obc__pb2.gps_query_position_update_rate_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_position_update_rate_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_query_position_update_rate = channel.unary_stream(
                '/obc/schedule_gps_query_position_update_rate',
                request_serializer=obc__pb2.gps_query_position_update_rate_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_position_update_rate_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_configure_nmea_messges = channel.unary_unary(
                '/obc/gps_configure_nmea_messges',
                request_serializer=obc__pb2.gps_configure_nmea_messges_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_nmea_messges_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_configure_nmea_messges = channel.unary_stream(
                '/obc/schedule_gps_configure_nmea_messges',
                request_serializer=obc__pb2.gps_configure_nmea_messges_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_nmea_messges_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_query_nmea_messges = channel.unary_unary(
                '/obc/gps_query_nmea_messges',
                request_serializer=obc__pb2.gps_query_nmea_messges_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_nmea_messges_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_query_nmea_messges = channel.unary_stream(
                '/obc/schedule_gps_query_nmea_messges',
                request_serializer=obc__pb2.gps_query_nmea_messges_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_query_nmea_messges_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_configure_serial_port = channel.unary_unary(
                '/obc/gps_configure_serial_port',
                request_serializer=obc__pb2.gps_configure_serial_port_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_serial_port_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_configure_serial_port = channel.unary_stream(
                '/obc/schedule_gps_configure_serial_port',
                request_serializer=obc__pb2.gps_configure_serial_port_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_serial_port_command_OBCResponse.FromString,
                _registered_method=True)
        self.gps_configure_nav_msg_interval = channel.unary_unary(
                '/obc/gps_configure_nav_msg_interval',
                request_serializer=obc__pb2.gps_configure_nav_msg_interval_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_gps_configure_nav_msg_interval = channel.unary_stream(
                '/obc/schedule_gps_configure_nav_msg_interval',
                request_serializer=obc__pb2.gps_configure_nav_msg_interval_command_args.SerializeToString,
                response_deserializer=obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.FromString,
                _registered_method=True)
        self.get_uptime = channel.unary_unary(
                '/obc/get_uptime',
                request_serializer=obc__pb2.get_uptime_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_uptime_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_get_uptime = channel.unary_stream(
                '/obc/schedule_get_uptime',
                request_serializer=obc__pb2.get_uptime_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_uptime_command_OBCResponse.FromString,
                _registered_method=True)
        self.flash_sleep = channel.unary_unary(
                '/obc/flash_sleep',
                request_serializer=obc__pb2.flash_sleep_command_args.SerializeToString,
                response_deserializer=obc__pb2.flash_sleep_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_flash_sleep = channel.unary_stream(
                '/obc/schedule_flash_sleep',
                request_serializer=obc__pb2.flash_sleep_command_args.SerializeToString,
                response_deserializer=obc__pb2.flash_sleep_command_OBCResponse.FromString,
                _registered_method=True)
        self.get_telemetry = channel.unary_unary(
                '/obc/get_telemetry',
                request_serializer=obc__pb2.get_telemetry_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_telemetry_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_get_telemetry = channel.unary_stream(
                '/obc/schedule_get_telemetry',
                request_serializer=obc__pb2.get_telemetry_command_args.SerializeToString,
                response_deserializer=obc__pb2.get_telemetry_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_echo = channel.unary_unary(
                '/obc/test_echo',
                request_serializer=obc__pb2.test_echo_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_echo_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_echo = channel.unary_stream(
                '/obc/schedule_test_echo',
                request_serializer=obc__pb2.test_echo_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_echo_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_hang = channel.unary_unary(
                '/obc/test_hang',
                request_serializer=obc__pb2.test_hang_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_hang_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_hang = channel.unary_stream(
                '/obc/schedule_test_hang',
                request_serializer=obc__pb2.test_hang_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_hang_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_comms_tx_rx = channel.unary_unary(
                '/obc/test_comms_tx_rx',
                request_serializer=obc__pb2.test_comms_tx_rx_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_tx_rx_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_comms_tx_rx = channel.unary_stream(
                '/obc/schedule_test_comms_tx_rx',
                request_serializer=obc__pb2.test_comms_tx_rx_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_tx_rx_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_comms_stress1 = channel.unary_unary(
                '/obc/test_comms_stress1',
                request_serializer=obc__pb2.test_comms_stress1_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_stress1_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_comms_stress1 = channel.unary_stream(
                '/obc/schedule_test_comms_stress1',
                request_serializer=obc__pb2.test_comms_stress1_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_stress1_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_comms_flash_app = channel.unary_unary(
                '/obc/test_comms_flash_app',
                request_serializer=obc__pb2.test_comms_flash_app_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_flash_app_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_comms_flash_app = channel.unary_stream(
                '/obc/schedule_test_comms_flash_app',
                request_serializer=obc__pb2.test_comms_flash_app_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_flash_app_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_comms_reboot = channel.unary_unary(
                '/obc/test_comms_reboot',
                request_serializer=obc__pb2.test_comms_reboot_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_reboot_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_comms_reboot = channel.unary_stream(
                '/obc/schedule_test_comms_reboot',
                request_serializer=obc__pb2.test_comms_reboot_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_reboot_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_comms_get_telem = channel.unary_unary(
                '/obc/test_comms_get_telem',
                request_serializer=obc__pb2.test_comms_get_telem_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_get_telem_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_comms_get_telem = channel.unary_stream(
                '/obc/schedule_test_comms_get_telem',
                request_serializer=obc__pb2.test_comms_get_telem_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_comms_get_telem_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_float = channel.unary_unary(
                '/obc/test_eps_read_float',
                request_serializer=obc__pb2.test_eps_read_float_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_float_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_float = channel.unary_stream(
                '/obc/schedule_test_eps_read_float',
                request_serializer=obc__pb2.test_eps_read_float_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_float_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_float_raw = channel.unary_unary(
                '/obc/test_eps_read_float_raw',
                request_serializer=obc__pb2.test_eps_read_float_raw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_float_raw_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_float_raw = channel.unary_stream(
                '/obc/schedule_test_eps_read_float_raw',
                request_serializer=obc__pb2.test_eps_read_float_raw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_float_raw_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_int = channel.unary_unary(
                '/obc/test_eps_read_int',
                request_serializer=obc__pb2.test_eps_read_int_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_int_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_int = channel.unary_stream(
                '/obc/schedule_test_eps_read_int',
                request_serializer=obc__pb2.test_eps_read_int_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_int_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_write = channel.unary_unary(
                '/obc/test_eps_write',
                request_serializer=obc__pb2.test_eps_write_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_write_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_write = channel.unary_stream(
                '/obc/schedule_test_eps_write',
                request_serializer=obc__pb2.test_eps_write_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_write_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_sanity = channel.unary_unary(
                '/obc/test_eps_read_sanity',
                request_serializer=obc__pb2.test_eps_read_sanity_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_sanity_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_sanity = channel.unary_stream(
                '/obc/schedule_test_eps_read_sanity',
                request_serializer=obc__pb2.test_eps_read_sanity_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_sanity_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_writeread_sanity = channel.unary_unary(
                '/obc/test_eps_writeread_sanity',
                request_serializer=obc__pb2.test_eps_writeread_sanity_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_writeread_sanity_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_writeread_sanity = channel.unary_stream(
                '/obc/schedule_test_eps_writeread_sanity',
                request_serializer=obc__pb2.test_eps_writeread_sanity_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_writeread_sanity_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_measure_buses = channel.unary_unary(
                '/obc/test_eps_measure_buses',
                request_serializer=obc__pb2.test_eps_measure_buses_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_measure_buses_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_measure_buses = channel.unary_stream(
                '/obc/schedule_test_eps_measure_buses',
                request_serializer=obc__pb2.test_eps_measure_buses_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_measure_buses_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_measure_temps = channel.unary_unary(
                '/obc/test_eps_measure_temps',
                request_serializer=obc__pb2.test_eps_measure_temps_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_measure_temps_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_measure_temps = channel.unary_stream(
                '/obc/schedule_test_eps_measure_temps',
                request_serializer=obc__pb2.test_eps_measure_temps_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_measure_temps_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_counters = channel.unary_unary(
                '/obc/test_eps_read_counters',
                request_serializer=obc__pb2.test_eps_read_counters_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_counters_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_counters = channel.unary_stream(
                '/obc/schedule_test_eps_read_counters',
                request_serializer=obc__pb2.test_eps_read_counters_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_counters_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_eps_read_status = channel.unary_unary(
                '/obc/test_eps_read_status',
                request_serializer=obc__pb2.test_eps_read_status_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_status_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_eps_read_status = channel.unary_stream(
                '/obc/schedule_test_eps_read_status',
                request_serializer=obc__pb2.test_eps_read_status_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_eps_read_status_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mag = channel.unary_unary(
                '/obc/test_mag',
                request_serializer=obc__pb2.test_mag_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mag = channel.unary_stream(
                '/obc/schedule_test_mag',
                request_serializer=obc__pb2.test_mag_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mag_all = channel.unary_unary(
                '/obc/test_mag_all',
                request_serializer=obc__pb2.test_mag_all_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_all_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mag_all = channel.unary_stream(
                '/obc/schedule_test_mag_all',
                request_serializer=obc__pb2.test_mag_all_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_all_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mag_init = channel.unary_unary(
                '/obc/test_mag_init',
                request_serializer=obc__pb2.test_mag_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mag_init = channel.unary_stream(
                '/obc/schedule_test_mag_init',
                request_serializer=obc__pb2.test_mag_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mag_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_imu = channel.unary_unary(
                '/obc/test_imu',
                request_serializer=obc__pb2.test_imu_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_imu_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_imu = channel.unary_stream(
                '/obc/schedule_test_imu',
                request_serializer=obc__pb2.test_imu_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_imu_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_panel_gyro = channel.unary_unary(
                '/obc/test_panel_gyro',
                request_serializer=obc__pb2.test_panel_gyro_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_panel_gyro_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_panel_gyro = channel.unary_stream(
                '/obc/schedule_test_panel_gyro',
                request_serializer=obc__pb2.test_panel_gyro_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_panel_gyro_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_can_gpio = channel.unary_unary(
                '/obc/test_can_gpio',
                request_serializer=obc__pb2.test_can_gpio_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_can_gpio_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_can_gpio = channel.unary_stream(
                '/obc/schedule_test_can_gpio',
                request_serializer=obc__pb2.test_can_gpio_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_can_gpio_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_flash_rw = channel.unary_unary(
                '/obc/test_flash_rw',
                request_serializer=obc__pb2.test_flash_rw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_flash_rw_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_flash_rw = channel.unary_stream(
                '/obc/schedule_test_flash_rw',
                request_serializer=obc__pb2.test_flash_rw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_flash_rw_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_filesystem = channel.unary_unary(
                '/obc/test_filesystem',
                request_serializer=obc__pb2.test_filesystem_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_filesystem_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_filesystem = channel.unary_stream(
                '/obc/schedule_test_filesystem',
                request_serializer=obc__pb2.test_filesystem_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_filesystem_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_cam_init = channel.unary_unary(
                '/obc/test_cam_init',
                request_serializer=obc__pb2.test_cam_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_cam_init = channel.unary_stream(
                '/obc/schedule_test_cam_init',
                request_serializer=obc__pb2.test_cam_init_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_init_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_cam_capture = channel.unary_unary(
                '/obc/test_cam_capture',
                request_serializer=obc__pb2.test_cam_capture_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_capture_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_cam_capture = channel.unary_stream(
                '/obc/schedule_test_cam_capture',
                request_serializer=obc__pb2.test_cam_capture_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_capture_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_cam_wr_sreg = channel.unary_unary(
                '/obc/test_cam_wr_sreg',
                request_serializer=obc__pb2.test_cam_wr_sreg_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_wr_sreg_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_cam_wr_sreg = channel.unary_stream(
                '/obc/schedule_test_cam_wr_sreg',
                request_serializer=obc__pb2.test_cam_wr_sreg_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_wr_sreg_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_cam_rd_sreg = channel.unary_unary(
                '/obc/test_cam_rd_sreg',
                request_serializer=obc__pb2.test_cam_rd_sreg_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_rd_sreg_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_cam_rd_sreg = channel.unary_stream(
                '/obc/schedule_test_cam_rd_sreg',
                request_serializer=obc__pb2.test_cam_rd_sreg_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_rd_sreg_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_cam_wr_sregs = channel.unary_unary(
                '/obc/test_cam_wr_sregs',
                request_serializer=obc__pb2.test_cam_wr_sregs_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_wr_sregs_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_cam_wr_sregs = channel.unary_stream(
                '/obc/schedule_test_cam_wr_sregs',
                request_serializer=obc__pb2.test_cam_wr_sregs_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_cam_wr_sregs_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_dsplib = channel.unary_unary(
                '/obc/test_dsplib',
                request_serializer=obc__pb2.test_dsplib_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_dsplib_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_dsplib = channel.unary_stream(
                '/obc/schedule_test_dsplib',
                request_serializer=obc__pb2.test_dsplib_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_dsplib_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_quest = channel.unary_unary(
                '/obc/test_quest',
                request_serializer=obc__pb2.test_quest_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_quest_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_quest = channel.unary_stream(
                '/obc/schedule_test_quest',
                request_serializer=obc__pb2.test_quest_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_quest_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_rtc_get_time = channel.unary_unary(
                '/obc/test_rtc_get_time',
                request_serializer=obc__pb2.test_rtc_get_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_get_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_rtc_get_time = channel.unary_stream(
                '/obc/schedule_test_rtc_get_time',
                request_serializer=obc__pb2.test_rtc_get_time_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_get_time_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_rtc_cap_and_get_timestamp = channel.unary_unary(
                '/obc/test_rtc_cap_and_get_timestamp',
                request_serializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_rtc_cap_and_get_timestamp = channel.unary_stream(
                '/obc/schedule_test_rtc_cap_and_get_timestamp',
                request_serializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.FromString,
                _registered_method=True)
        self.debug_read_rtc_reg = channel.unary_unary(
                '/obc/debug_read_rtc_reg',
                request_serializer=obc__pb2.debug_read_rtc_reg_command_args.SerializeToString,
                response_deserializer=obc__pb2.debug_read_rtc_reg_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_debug_read_rtc_reg = channel.unary_stream(
                '/obc/schedule_debug_read_rtc_reg',
                request_serializer=obc__pb2.debug_read_rtc_reg_command_args.SerializeToString,
                response_deserializer=obc__pb2.debug_read_rtc_reg_command_OBCResponse.FromString,
                _registered_method=True)
        self.debug_write_rtc_reg = channel.unary_unary(
                '/obc/debug_write_rtc_reg',
                request_serializer=obc__pb2.debug_write_rtc_reg_command_args.SerializeToString,
                response_deserializer=obc__pb2.debug_write_rtc_reg_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_debug_write_rtc_reg = channel.unary_stream(
                '/obc/schedule_debug_write_rtc_reg',
                request_serializer=obc__pb2.debug_write_rtc_reg_command_args.SerializeToString,
                response_deserializer=obc__pb2.debug_write_rtc_reg_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_rtc_alarm_n_sec = channel.unary_unary(
                '/obc/test_rtc_alarm_n_sec',
                request_serializer=obc__pb2.test_rtc_alarm_n_sec_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_rtc_alarm_n_sec = channel.unary_stream(
                '/obc/schedule_test_rtc_alarm_n_sec',
                request_serializer=obc__pb2.test_rtc_alarm_n_sec_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_adcs_sun_model = channel.unary_unary(
                '/obc/test_adcs_sun_model',
                request_serializer=obc__pb2.test_adcs_sun_model_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_adcs_sun_model_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_adcs_sun_model = channel.unary_stream(
                '/obc/schedule_test_adcs_sun_model',
                request_serializer=obc__pb2.test_adcs_sun_model_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_adcs_sun_model_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_adc_voltage = channel.unary_unary(
                '/obc/test_adc_voltage',
                request_serializer=obc__pb2.test_adc_voltage_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_adc_voltage_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_adc_voltage = channel.unary_stream(
                '/obc/schedule_test_adc_voltage',
                request_serializer=obc__pb2.test_adc_voltage_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_adc_voltage_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_large_payload_split = channel.unary_unary(
                '/obc/test_large_payload_split',
                request_serializer=obc__pb2.test_large_payload_split_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_large_payload_split_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_large_payload_split = channel.unary_stream(
                '/obc/schedule_test_large_payload_split',
                request_serializer=obc__pb2.test_large_payload_split_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_large_payload_split_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mram_rw = channel.unary_unary(
                '/obc/test_mram_rw',
                request_serializer=obc__pb2.test_mram_rw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_rw_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mram_rw = channel.unary_stream(
                '/obc/schedule_test_mram_rw',
                request_serializer=obc__pb2.test_mram_rw_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_rw_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mram_write = channel.unary_unary(
                '/obc/test_mram_write',
                request_serializer=obc__pb2.test_mram_write_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_write_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mram_write = channel.unary_stream(
                '/obc/schedule_test_mram_write',
                request_serializer=obc__pb2.test_mram_write_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_write_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_mram_read = channel.unary_unary(
                '/obc/test_mram_read',
                request_serializer=obc__pb2.test_mram_read_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_read_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_mram_read = channel.unary_stream(
                '/obc/schedule_test_mram_read',
                request_serializer=obc__pb2.test_mram_read_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_mram_read_command_OBCResponse.FromString,
                _registered_method=True)
        self.test_telem_glv = channel.unary_unary(
                '/obc/test_telem_glv',
                request_serializer=obc__pb2.test_telem_glv_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_telem_glv_command_OBCResponse.FromString,
                _registered_method=True)
        self.schedule_test_telem_glv = channel.unary_stream(
                '/obc/schedule_test_telem_glv',
                request_serializer=obc__pb2.test_telem_glv_command_args.SerializeToString,
                response_deserializer=obc__pb2.test_telem_glv_command_OBCResponse.FromString,
                _registered_method=True)


class obcServicer(object):
    """Reminder: NO float only double, due to node floating point precision (IEEE 754 double precision)
    field name cant be https://github.com/protocolbuffers/protobuf-javascript/blob/main/generator/js_generator.cc#L60-L73

    """

    def log(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_get_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_set_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_min_stack_space(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_get_min_stack_space(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def capture_rtos_trace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_capture_rtos_trace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtos_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_rtos_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def low_power(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_low_power(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sys_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_sys_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cpu_usage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_cpu_usage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def task_runtime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_task_runtime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gpio_exp_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gpio_exp_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def i2c_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_i2c_reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fw_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_fw_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wmm_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_wmm_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wmm_is_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_wmm_is_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wmm_get_mag_ref(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_wmm_get_mag_ref(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_query_sw_ver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_query_sw_ver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_set_factory_settings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_set_factory_settings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_configure_power_mode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_configure_power_mode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_query_power_mode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_query_power_mode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_query_sw_crc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_query_sw_crc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_configure_position_upate_rate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_configure_position_upate_rate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_query_position_update_rate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_query_position_update_rate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_configure_nmea_messges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_configure_nmea_messges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_query_nmea_messges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_query_nmea_messges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_configure_serial_port(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_configure_serial_port(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gps_configure_nav_msg_interval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_gps_configure_nav_msg_interval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_uptime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_get_uptime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flash_sleep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_flash_sleep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_telemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_get_telemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_echo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_echo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_hang(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_hang(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_comms_tx_rx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_comms_tx_rx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_comms_stress1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_comms_stress1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_comms_flash_app(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_comms_flash_app(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_comms_reboot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_comms_reboot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_comms_get_telem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_comms_get_telem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_float(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_float(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_float_raw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_float_raw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_int(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_int(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_sanity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_sanity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_writeread_sanity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_writeread_sanity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_measure_buses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_measure_buses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_measure_temps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_measure_temps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_counters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_counters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_eps_read_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_eps_read_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mag_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mag_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mag_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mag_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_imu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_imu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_panel_gyro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_panel_gyro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_can_gpio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_can_gpio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_flash_rw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_flash_rw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_filesystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_filesystem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_cam_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_cam_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_cam_capture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_cam_capture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_cam_wr_sreg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_cam_wr_sreg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_cam_rd_sreg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_cam_rd_sreg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_cam_wr_sregs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_cam_wr_sregs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_dsplib(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_dsplib(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_quest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_quest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_rtc_get_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_rtc_get_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_rtc_cap_and_get_timestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_rtc_cap_and_get_timestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def debug_read_rtc_reg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_debug_read_rtc_reg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def debug_write_rtc_reg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_debug_write_rtc_reg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_rtc_alarm_n_sec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_rtc_alarm_n_sec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_adcs_sun_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_adcs_sun_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_adc_voltage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_adc_voltage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_large_payload_split(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_large_payload_split(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mram_rw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mram_rw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mram_write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mram_write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_mram_read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_mram_read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def test_telem_glv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_test_telem_glv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_obcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'log': grpc.unary_stream_rpc_method_handler(
                    servicer.log,
                    request_deserializer=obc__pb2.log_args.FromString,
                    response_serializer=obc__pb2.log_response.SerializeToString,
            ),
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=obc__pb2.reset_command_args.FromString,
                    response_serializer=obc__pb2.reset_command_OBCResponse.SerializeToString,
            ),
            'schedule_reset': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_reset,
                    request_deserializer=obc__pb2.reset_command_args.FromString,
                    response_serializer=obc__pb2.reset_command_OBCResponse.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=obc__pb2.ping_command_args.FromString,
                    response_serializer=obc__pb2.ping_command_OBCResponse.SerializeToString,
            ),
            'schedule_ping': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_ping,
                    request_deserializer=obc__pb2.ping_command_args.FromString,
                    response_serializer=obc__pb2.ping_command_OBCResponse.SerializeToString,
            ),
            'get_time': grpc.unary_unary_rpc_method_handler(
                    servicer.get_time,
                    request_deserializer=obc__pb2.get_time_command_args.FromString,
                    response_serializer=obc__pb2.get_time_command_OBCResponse.SerializeToString,
            ),
            'schedule_get_time': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_get_time,
                    request_deserializer=obc__pb2.get_time_command_args.FromString,
                    response_serializer=obc__pb2.get_time_command_OBCResponse.SerializeToString,
            ),
            'set_time': grpc.unary_unary_rpc_method_handler(
                    servicer.set_time,
                    request_deserializer=obc__pb2.set_time_command_args.FromString,
                    response_serializer=obc__pb2.set_time_command_OBCResponse.SerializeToString,
            ),
            'schedule_set_time': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_set_time,
                    request_deserializer=obc__pb2.set_time_command_args.FromString,
                    response_serializer=obc__pb2.set_time_command_OBCResponse.SerializeToString,
            ),
            'get_min_stack_space': grpc.unary_unary_rpc_method_handler(
                    servicer.get_min_stack_space,
                    request_deserializer=obc__pb2.get_min_stack_space_command_args.FromString,
                    response_serializer=obc__pb2.get_min_stack_space_command_OBCResponse.SerializeToString,
            ),
            'schedule_get_min_stack_space': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_get_min_stack_space,
                    request_deserializer=obc__pb2.get_min_stack_space_command_args.FromString,
                    response_serializer=obc__pb2.get_min_stack_space_command_OBCResponse.SerializeToString,
            ),
            'capture_rtos_trace': grpc.unary_unary_rpc_method_handler(
                    servicer.capture_rtos_trace,
                    request_deserializer=obc__pb2.capture_rtos_trace_command_args.FromString,
                    response_serializer=obc__pb2.capture_rtos_trace_command_OBCResponse.SerializeToString,
            ),
            'schedule_capture_rtos_trace': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_capture_rtos_trace,
                    request_deserializer=obc__pb2.capture_rtos_trace_command_args.FromString,
                    response_serializer=obc__pb2.capture_rtos_trace_command_OBCResponse.SerializeToString,
            ),
            'rtos_state': grpc.unary_unary_rpc_method_handler(
                    servicer.rtos_state,
                    request_deserializer=obc__pb2.rtos_state_command_args.FromString,
                    response_serializer=obc__pb2.rtos_state_command_OBCResponse.SerializeToString,
            ),
            'schedule_rtos_state': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_rtos_state,
                    request_deserializer=obc__pb2.rtos_state_command_args.FromString,
                    response_serializer=obc__pb2.rtos_state_command_OBCResponse.SerializeToString,
            ),
            'low_power': grpc.unary_unary_rpc_method_handler(
                    servicer.low_power,
                    request_deserializer=obc__pb2.low_power_command_args.FromString,
                    response_serializer=obc__pb2.low_power_command_OBCResponse.SerializeToString,
            ),
            'schedule_low_power': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_low_power,
                    request_deserializer=obc__pb2.low_power_command_args.FromString,
                    response_serializer=obc__pb2.low_power_command_OBCResponse.SerializeToString,
            ),
            'sys_time': grpc.unary_unary_rpc_method_handler(
                    servicer.sys_time,
                    request_deserializer=obc__pb2.sys_time_command_args.FromString,
                    response_serializer=obc__pb2.sys_time_command_OBCResponse.SerializeToString,
            ),
            'schedule_sys_time': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_sys_time,
                    request_deserializer=obc__pb2.sys_time_command_args.FromString,
                    response_serializer=obc__pb2.sys_time_command_OBCResponse.SerializeToString,
            ),
            'cpu_usage': grpc.unary_unary_rpc_method_handler(
                    servicer.cpu_usage,
                    request_deserializer=obc__pb2.cpu_usage_command_args.FromString,
                    response_serializer=obc__pb2.cpu_usage_command_OBCResponse.SerializeToString,
            ),
            'schedule_cpu_usage': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_cpu_usage,
                    request_deserializer=obc__pb2.cpu_usage_command_args.FromString,
                    response_serializer=obc__pb2.cpu_usage_command_OBCResponse.SerializeToString,
            ),
            'task_runtime': grpc.unary_unary_rpc_method_handler(
                    servicer.task_runtime,
                    request_deserializer=obc__pb2.task_runtime_command_args.FromString,
                    response_serializer=obc__pb2.task_runtime_command_OBCResponse.SerializeToString,
            ),
            'schedule_task_runtime': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_task_runtime,
                    request_deserializer=obc__pb2.task_runtime_command_args.FromString,
                    response_serializer=obc__pb2.task_runtime_command_OBCResponse.SerializeToString,
            ),
            'gpio_exp_reset': grpc.unary_unary_rpc_method_handler(
                    servicer.gpio_exp_reset,
                    request_deserializer=obc__pb2.gpio_exp_reset_command_args.FromString,
                    response_serializer=obc__pb2.gpio_exp_reset_command_OBCResponse.SerializeToString,
            ),
            'schedule_gpio_exp_reset': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gpio_exp_reset,
                    request_deserializer=obc__pb2.gpio_exp_reset_command_args.FromString,
                    response_serializer=obc__pb2.gpio_exp_reset_command_OBCResponse.SerializeToString,
            ),
            'i2c_reset': grpc.unary_unary_rpc_method_handler(
                    servicer.i2c_reset,
                    request_deserializer=obc__pb2.i2c_reset_command_args.FromString,
                    response_serializer=obc__pb2.i2c_reset_command_OBCResponse.SerializeToString,
            ),
            'schedule_i2c_reset': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_i2c_reset,
                    request_deserializer=obc__pb2.i2c_reset_command_args.FromString,
                    response_serializer=obc__pb2.i2c_reset_command_OBCResponse.SerializeToString,
            ),
            'heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.heartbeat,
                    request_deserializer=obc__pb2.heartbeat_command_args.FromString,
                    response_serializer=obc__pb2.heartbeat_command_OBCResponse.SerializeToString,
            ),
            'schedule_heartbeat': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_heartbeat,
                    request_deserializer=obc__pb2.heartbeat_command_args.FromString,
                    response_serializer=obc__pb2.heartbeat_command_OBCResponse.SerializeToString,
            ),
            'gps_restart': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_restart,
                    request_deserializer=obc__pb2.gps_restart_command_args.FromString,
                    response_serializer=obc__pb2.gps_restart_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_restart': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_restart,
                    request_deserializer=obc__pb2.gps_restart_command_args.FromString,
                    response_serializer=obc__pb2.gps_restart_command_OBCResponse.SerializeToString,
            ),
            'fw_info': grpc.unary_unary_rpc_method_handler(
                    servicer.fw_info,
                    request_deserializer=obc__pb2.fw_info_command_args.FromString,
                    response_serializer=obc__pb2.fw_info_command_OBCResponse.SerializeToString,
            ),
            'schedule_fw_info': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_fw_info,
                    request_deserializer=obc__pb2.fw_info_command_args.FromString,
                    response_serializer=obc__pb2.fw_info_command_OBCResponse.SerializeToString,
            ),
            'wmm_init': grpc.unary_unary_rpc_method_handler(
                    servicer.wmm_init,
                    request_deserializer=obc__pb2.wmm_init_command_args.FromString,
                    response_serializer=obc__pb2.wmm_init_command_OBCResponse.SerializeToString,
            ),
            'schedule_wmm_init': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_wmm_init,
                    request_deserializer=obc__pb2.wmm_init_command_args.FromString,
                    response_serializer=obc__pb2.wmm_init_command_OBCResponse.SerializeToString,
            ),
            'wmm_is_init': grpc.unary_unary_rpc_method_handler(
                    servicer.wmm_is_init,
                    request_deserializer=obc__pb2.wmm_is_init_command_args.FromString,
                    response_serializer=obc__pb2.wmm_is_init_command_OBCResponse.SerializeToString,
            ),
            'schedule_wmm_is_init': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_wmm_is_init,
                    request_deserializer=obc__pb2.wmm_is_init_command_args.FromString,
                    response_serializer=obc__pb2.wmm_is_init_command_OBCResponse.SerializeToString,
            ),
            'wmm_get_mag_ref': grpc.unary_unary_rpc_method_handler(
                    servicer.wmm_get_mag_ref,
                    request_deserializer=obc__pb2.wmm_get_mag_ref_command_args.FromString,
                    response_serializer=obc__pb2.wmm_get_mag_ref_command_OBCResponse.SerializeToString,
            ),
            'schedule_wmm_get_mag_ref': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_wmm_get_mag_ref,
                    request_deserializer=obc__pb2.wmm_get_mag_ref_command_args.FromString,
                    response_serializer=obc__pb2.wmm_get_mag_ref_command_OBCResponse.SerializeToString,
            ),
            'gps_query_sw_ver': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_query_sw_ver,
                    request_deserializer=obc__pb2.gps_query_sw_ver_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_sw_ver_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_query_sw_ver': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_query_sw_ver,
                    request_deserializer=obc__pb2.gps_query_sw_ver_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_sw_ver_command_OBCResponse.SerializeToString,
            ),
            'gps_set_factory_settings': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_set_factory_settings,
                    request_deserializer=obc__pb2.gps_set_factory_settings_command_args.FromString,
                    response_serializer=obc__pb2.gps_set_factory_settings_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_set_factory_settings': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_set_factory_settings,
                    request_deserializer=obc__pb2.gps_set_factory_settings_command_args.FromString,
                    response_serializer=obc__pb2.gps_set_factory_settings_command_OBCResponse.SerializeToString,
            ),
            'gps_configure_power_mode': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_configure_power_mode,
                    request_deserializer=obc__pb2.gps_configure_power_mode_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_power_mode_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_configure_power_mode': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_configure_power_mode,
                    request_deserializer=obc__pb2.gps_configure_power_mode_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_power_mode_command_OBCResponse.SerializeToString,
            ),
            'gps_query_power_mode': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_query_power_mode,
                    request_deserializer=obc__pb2.gps_query_power_mode_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_power_mode_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_query_power_mode': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_query_power_mode,
                    request_deserializer=obc__pb2.gps_query_power_mode_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_power_mode_command_OBCResponse.SerializeToString,
            ),
            'gps_query_sw_crc': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_query_sw_crc,
                    request_deserializer=obc__pb2.gps_query_sw_crc_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_sw_crc_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_query_sw_crc': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_query_sw_crc,
                    request_deserializer=obc__pb2.gps_query_sw_crc_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_sw_crc_command_OBCResponse.SerializeToString,
            ),
            'gps_configure_position_upate_rate': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_configure_position_upate_rate,
                    request_deserializer=obc__pb2.gps_configure_position_upate_rate_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_configure_position_upate_rate': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_configure_position_upate_rate,
                    request_deserializer=obc__pb2.gps_configure_position_upate_rate_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.SerializeToString,
            ),
            'gps_query_position_update_rate': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_query_position_update_rate,
                    request_deserializer=obc__pb2.gps_query_position_update_rate_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_position_update_rate_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_query_position_update_rate': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_query_position_update_rate,
                    request_deserializer=obc__pb2.gps_query_position_update_rate_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_position_update_rate_command_OBCResponse.SerializeToString,
            ),
            'gps_configure_nmea_messges': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_configure_nmea_messges,
                    request_deserializer=obc__pb2.gps_configure_nmea_messges_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_nmea_messges_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_configure_nmea_messges': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_configure_nmea_messges,
                    request_deserializer=obc__pb2.gps_configure_nmea_messges_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_nmea_messges_command_OBCResponse.SerializeToString,
            ),
            'gps_query_nmea_messges': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_query_nmea_messges,
                    request_deserializer=obc__pb2.gps_query_nmea_messges_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_nmea_messges_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_query_nmea_messges': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_query_nmea_messges,
                    request_deserializer=obc__pb2.gps_query_nmea_messges_command_args.FromString,
                    response_serializer=obc__pb2.gps_query_nmea_messges_command_OBCResponse.SerializeToString,
            ),
            'gps_configure_serial_port': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_configure_serial_port,
                    request_deserializer=obc__pb2.gps_configure_serial_port_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_serial_port_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_configure_serial_port': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_configure_serial_port,
                    request_deserializer=obc__pb2.gps_configure_serial_port_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_serial_port_command_OBCResponse.SerializeToString,
            ),
            'gps_configure_nav_msg_interval': grpc.unary_unary_rpc_method_handler(
                    servicer.gps_configure_nav_msg_interval,
                    request_deserializer=obc__pb2.gps_configure_nav_msg_interval_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.SerializeToString,
            ),
            'schedule_gps_configure_nav_msg_interval': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_gps_configure_nav_msg_interval,
                    request_deserializer=obc__pb2.gps_configure_nav_msg_interval_command_args.FromString,
                    response_serializer=obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.SerializeToString,
            ),
            'get_uptime': grpc.unary_unary_rpc_method_handler(
                    servicer.get_uptime,
                    request_deserializer=obc__pb2.get_uptime_command_args.FromString,
                    response_serializer=obc__pb2.get_uptime_command_OBCResponse.SerializeToString,
            ),
            'schedule_get_uptime': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_get_uptime,
                    request_deserializer=obc__pb2.get_uptime_command_args.FromString,
                    response_serializer=obc__pb2.get_uptime_command_OBCResponse.SerializeToString,
            ),
            'flash_sleep': grpc.unary_unary_rpc_method_handler(
                    servicer.flash_sleep,
                    request_deserializer=obc__pb2.flash_sleep_command_args.FromString,
                    response_serializer=obc__pb2.flash_sleep_command_OBCResponse.SerializeToString,
            ),
            'schedule_flash_sleep': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_flash_sleep,
                    request_deserializer=obc__pb2.flash_sleep_command_args.FromString,
                    response_serializer=obc__pb2.flash_sleep_command_OBCResponse.SerializeToString,
            ),
            'get_telemetry': grpc.unary_unary_rpc_method_handler(
                    servicer.get_telemetry,
                    request_deserializer=obc__pb2.get_telemetry_command_args.FromString,
                    response_serializer=obc__pb2.get_telemetry_command_OBCResponse.SerializeToString,
            ),
            'schedule_get_telemetry': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_get_telemetry,
                    request_deserializer=obc__pb2.get_telemetry_command_args.FromString,
                    response_serializer=obc__pb2.get_telemetry_command_OBCResponse.SerializeToString,
            ),
            'test_echo': grpc.unary_unary_rpc_method_handler(
                    servicer.test_echo,
                    request_deserializer=obc__pb2.test_echo_command_args.FromString,
                    response_serializer=obc__pb2.test_echo_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_echo': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_echo,
                    request_deserializer=obc__pb2.test_echo_command_args.FromString,
                    response_serializer=obc__pb2.test_echo_command_OBCResponse.SerializeToString,
            ),
            'test_hang': grpc.unary_unary_rpc_method_handler(
                    servicer.test_hang,
                    request_deserializer=obc__pb2.test_hang_command_args.FromString,
                    response_serializer=obc__pb2.test_hang_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_hang': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_hang,
                    request_deserializer=obc__pb2.test_hang_command_args.FromString,
                    response_serializer=obc__pb2.test_hang_command_OBCResponse.SerializeToString,
            ),
            'test_comms_tx_rx': grpc.unary_unary_rpc_method_handler(
                    servicer.test_comms_tx_rx,
                    request_deserializer=obc__pb2.test_comms_tx_rx_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_tx_rx_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_comms_tx_rx': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_comms_tx_rx,
                    request_deserializer=obc__pb2.test_comms_tx_rx_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_tx_rx_command_OBCResponse.SerializeToString,
            ),
            'test_comms_stress1': grpc.unary_unary_rpc_method_handler(
                    servicer.test_comms_stress1,
                    request_deserializer=obc__pb2.test_comms_stress1_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_stress1_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_comms_stress1': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_comms_stress1,
                    request_deserializer=obc__pb2.test_comms_stress1_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_stress1_command_OBCResponse.SerializeToString,
            ),
            'test_comms_flash_app': grpc.unary_unary_rpc_method_handler(
                    servicer.test_comms_flash_app,
                    request_deserializer=obc__pb2.test_comms_flash_app_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_flash_app_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_comms_flash_app': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_comms_flash_app,
                    request_deserializer=obc__pb2.test_comms_flash_app_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_flash_app_command_OBCResponse.SerializeToString,
            ),
            'test_comms_reboot': grpc.unary_unary_rpc_method_handler(
                    servicer.test_comms_reboot,
                    request_deserializer=obc__pb2.test_comms_reboot_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_reboot_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_comms_reboot': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_comms_reboot,
                    request_deserializer=obc__pb2.test_comms_reboot_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_reboot_command_OBCResponse.SerializeToString,
            ),
            'test_comms_get_telem': grpc.unary_unary_rpc_method_handler(
                    servicer.test_comms_get_telem,
                    request_deserializer=obc__pb2.test_comms_get_telem_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_get_telem_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_comms_get_telem': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_comms_get_telem,
                    request_deserializer=obc__pb2.test_comms_get_telem_command_args.FromString,
                    response_serializer=obc__pb2.test_comms_get_telem_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_float': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_float,
                    request_deserializer=obc__pb2.test_eps_read_float_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_float_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_float': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_float,
                    request_deserializer=obc__pb2.test_eps_read_float_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_float_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_float_raw': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_float_raw,
                    request_deserializer=obc__pb2.test_eps_read_float_raw_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_float_raw_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_float_raw': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_float_raw,
                    request_deserializer=obc__pb2.test_eps_read_float_raw_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_float_raw_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_int': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_int,
                    request_deserializer=obc__pb2.test_eps_read_int_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_int_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_int': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_int,
                    request_deserializer=obc__pb2.test_eps_read_int_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_int_command_OBCResponse.SerializeToString,
            ),
            'test_eps_write': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_write,
                    request_deserializer=obc__pb2.test_eps_write_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_write_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_write': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_write,
                    request_deserializer=obc__pb2.test_eps_write_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_write_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_sanity': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_sanity,
                    request_deserializer=obc__pb2.test_eps_read_sanity_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_sanity_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_sanity': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_sanity,
                    request_deserializer=obc__pb2.test_eps_read_sanity_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_sanity_command_OBCResponse.SerializeToString,
            ),
            'test_eps_writeread_sanity': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_writeread_sanity,
                    request_deserializer=obc__pb2.test_eps_writeread_sanity_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_writeread_sanity_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_writeread_sanity': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_writeread_sanity,
                    request_deserializer=obc__pb2.test_eps_writeread_sanity_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_writeread_sanity_command_OBCResponse.SerializeToString,
            ),
            'test_eps_measure_buses': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_measure_buses,
                    request_deserializer=obc__pb2.test_eps_measure_buses_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_measure_buses_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_measure_buses': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_measure_buses,
                    request_deserializer=obc__pb2.test_eps_measure_buses_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_measure_buses_command_OBCResponse.SerializeToString,
            ),
            'test_eps_measure_temps': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_measure_temps,
                    request_deserializer=obc__pb2.test_eps_measure_temps_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_measure_temps_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_measure_temps': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_measure_temps,
                    request_deserializer=obc__pb2.test_eps_measure_temps_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_measure_temps_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_counters': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_counters,
                    request_deserializer=obc__pb2.test_eps_read_counters_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_counters_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_counters': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_counters,
                    request_deserializer=obc__pb2.test_eps_read_counters_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_counters_command_OBCResponse.SerializeToString,
            ),
            'test_eps_read_status': grpc.unary_unary_rpc_method_handler(
                    servicer.test_eps_read_status,
                    request_deserializer=obc__pb2.test_eps_read_status_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_status_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_eps_read_status': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_eps_read_status,
                    request_deserializer=obc__pb2.test_eps_read_status_command_args.FromString,
                    response_serializer=obc__pb2.test_eps_read_status_command_OBCResponse.SerializeToString,
            ),
            'test_mag': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mag,
                    request_deserializer=obc__pb2.test_mag_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mag': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mag,
                    request_deserializer=obc__pb2.test_mag_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_command_OBCResponse.SerializeToString,
            ),
            'test_mag_all': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mag_all,
                    request_deserializer=obc__pb2.test_mag_all_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_all_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mag_all': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mag_all,
                    request_deserializer=obc__pb2.test_mag_all_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_all_command_OBCResponse.SerializeToString,
            ),
            'test_mag_init': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mag_init,
                    request_deserializer=obc__pb2.test_mag_init_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_init_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mag_init': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mag_init,
                    request_deserializer=obc__pb2.test_mag_init_command_args.FromString,
                    response_serializer=obc__pb2.test_mag_init_command_OBCResponse.SerializeToString,
            ),
            'test_imu': grpc.unary_unary_rpc_method_handler(
                    servicer.test_imu,
                    request_deserializer=obc__pb2.test_imu_command_args.FromString,
                    response_serializer=obc__pb2.test_imu_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_imu': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_imu,
                    request_deserializer=obc__pb2.test_imu_command_args.FromString,
                    response_serializer=obc__pb2.test_imu_command_OBCResponse.SerializeToString,
            ),
            'test_panel_gyro': grpc.unary_unary_rpc_method_handler(
                    servicer.test_panel_gyro,
                    request_deserializer=obc__pb2.test_panel_gyro_command_args.FromString,
                    response_serializer=obc__pb2.test_panel_gyro_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_panel_gyro': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_panel_gyro,
                    request_deserializer=obc__pb2.test_panel_gyro_command_args.FromString,
                    response_serializer=obc__pb2.test_panel_gyro_command_OBCResponse.SerializeToString,
            ),
            'test_can_gpio': grpc.unary_unary_rpc_method_handler(
                    servicer.test_can_gpio,
                    request_deserializer=obc__pb2.test_can_gpio_command_args.FromString,
                    response_serializer=obc__pb2.test_can_gpio_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_can_gpio': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_can_gpio,
                    request_deserializer=obc__pb2.test_can_gpio_command_args.FromString,
                    response_serializer=obc__pb2.test_can_gpio_command_OBCResponse.SerializeToString,
            ),
            'test_flash_rw': grpc.unary_unary_rpc_method_handler(
                    servicer.test_flash_rw,
                    request_deserializer=obc__pb2.test_flash_rw_command_args.FromString,
                    response_serializer=obc__pb2.test_flash_rw_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_flash_rw': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_flash_rw,
                    request_deserializer=obc__pb2.test_flash_rw_command_args.FromString,
                    response_serializer=obc__pb2.test_flash_rw_command_OBCResponse.SerializeToString,
            ),
            'test_filesystem': grpc.unary_unary_rpc_method_handler(
                    servicer.test_filesystem,
                    request_deserializer=obc__pb2.test_filesystem_command_args.FromString,
                    response_serializer=obc__pb2.test_filesystem_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_filesystem': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_filesystem,
                    request_deserializer=obc__pb2.test_filesystem_command_args.FromString,
                    response_serializer=obc__pb2.test_filesystem_command_OBCResponse.SerializeToString,
            ),
            'test_cam_init': grpc.unary_unary_rpc_method_handler(
                    servicer.test_cam_init,
                    request_deserializer=obc__pb2.test_cam_init_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_init_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_cam_init': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_cam_init,
                    request_deserializer=obc__pb2.test_cam_init_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_init_command_OBCResponse.SerializeToString,
            ),
            'test_cam_capture': grpc.unary_unary_rpc_method_handler(
                    servicer.test_cam_capture,
                    request_deserializer=obc__pb2.test_cam_capture_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_capture_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_cam_capture': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_cam_capture,
                    request_deserializer=obc__pb2.test_cam_capture_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_capture_command_OBCResponse.SerializeToString,
            ),
            'test_cam_wr_sreg': grpc.unary_unary_rpc_method_handler(
                    servicer.test_cam_wr_sreg,
                    request_deserializer=obc__pb2.test_cam_wr_sreg_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_wr_sreg_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_cam_wr_sreg': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_cam_wr_sreg,
                    request_deserializer=obc__pb2.test_cam_wr_sreg_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_wr_sreg_command_OBCResponse.SerializeToString,
            ),
            'test_cam_rd_sreg': grpc.unary_unary_rpc_method_handler(
                    servicer.test_cam_rd_sreg,
                    request_deserializer=obc__pb2.test_cam_rd_sreg_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_rd_sreg_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_cam_rd_sreg': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_cam_rd_sreg,
                    request_deserializer=obc__pb2.test_cam_rd_sreg_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_rd_sreg_command_OBCResponse.SerializeToString,
            ),
            'test_cam_wr_sregs': grpc.unary_unary_rpc_method_handler(
                    servicer.test_cam_wr_sregs,
                    request_deserializer=obc__pb2.test_cam_wr_sregs_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_wr_sregs_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_cam_wr_sregs': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_cam_wr_sregs,
                    request_deserializer=obc__pb2.test_cam_wr_sregs_command_args.FromString,
                    response_serializer=obc__pb2.test_cam_wr_sregs_command_OBCResponse.SerializeToString,
            ),
            'test_dsplib': grpc.unary_unary_rpc_method_handler(
                    servicer.test_dsplib,
                    request_deserializer=obc__pb2.test_dsplib_command_args.FromString,
                    response_serializer=obc__pb2.test_dsplib_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_dsplib': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_dsplib,
                    request_deserializer=obc__pb2.test_dsplib_command_args.FromString,
                    response_serializer=obc__pb2.test_dsplib_command_OBCResponse.SerializeToString,
            ),
            'test_quest': grpc.unary_unary_rpc_method_handler(
                    servicer.test_quest,
                    request_deserializer=obc__pb2.test_quest_command_args.FromString,
                    response_serializer=obc__pb2.test_quest_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_quest': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_quest,
                    request_deserializer=obc__pb2.test_quest_command_args.FromString,
                    response_serializer=obc__pb2.test_quest_command_OBCResponse.SerializeToString,
            ),
            'test_rtc_get_time': grpc.unary_unary_rpc_method_handler(
                    servicer.test_rtc_get_time,
                    request_deserializer=obc__pb2.test_rtc_get_time_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_get_time_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_rtc_get_time': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_rtc_get_time,
                    request_deserializer=obc__pb2.test_rtc_get_time_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_get_time_command_OBCResponse.SerializeToString,
            ),
            'test_rtc_cap_and_get_timestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.test_rtc_cap_and_get_timestamp,
                    request_deserializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_rtc_cap_and_get_timestamp': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_rtc_cap_and_get_timestamp,
                    request_deserializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.SerializeToString,
            ),
            'debug_read_rtc_reg': grpc.unary_unary_rpc_method_handler(
                    servicer.debug_read_rtc_reg,
                    request_deserializer=obc__pb2.debug_read_rtc_reg_command_args.FromString,
                    response_serializer=obc__pb2.debug_read_rtc_reg_command_OBCResponse.SerializeToString,
            ),
            'schedule_debug_read_rtc_reg': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_debug_read_rtc_reg,
                    request_deserializer=obc__pb2.debug_read_rtc_reg_command_args.FromString,
                    response_serializer=obc__pb2.debug_read_rtc_reg_command_OBCResponse.SerializeToString,
            ),
            'debug_write_rtc_reg': grpc.unary_unary_rpc_method_handler(
                    servicer.debug_write_rtc_reg,
                    request_deserializer=obc__pb2.debug_write_rtc_reg_command_args.FromString,
                    response_serializer=obc__pb2.debug_write_rtc_reg_command_OBCResponse.SerializeToString,
            ),
            'schedule_debug_write_rtc_reg': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_debug_write_rtc_reg,
                    request_deserializer=obc__pb2.debug_write_rtc_reg_command_args.FromString,
                    response_serializer=obc__pb2.debug_write_rtc_reg_command_OBCResponse.SerializeToString,
            ),
            'test_rtc_alarm_n_sec': grpc.unary_unary_rpc_method_handler(
                    servicer.test_rtc_alarm_n_sec,
                    request_deserializer=obc__pb2.test_rtc_alarm_n_sec_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_rtc_alarm_n_sec': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_rtc_alarm_n_sec,
                    request_deserializer=obc__pb2.test_rtc_alarm_n_sec_command_args.FromString,
                    response_serializer=obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.SerializeToString,
            ),
            'test_adcs_sun_model': grpc.unary_unary_rpc_method_handler(
                    servicer.test_adcs_sun_model,
                    request_deserializer=obc__pb2.test_adcs_sun_model_command_args.FromString,
                    response_serializer=obc__pb2.test_adcs_sun_model_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_adcs_sun_model': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_adcs_sun_model,
                    request_deserializer=obc__pb2.test_adcs_sun_model_command_args.FromString,
                    response_serializer=obc__pb2.test_adcs_sun_model_command_OBCResponse.SerializeToString,
            ),
            'test_adc_voltage': grpc.unary_unary_rpc_method_handler(
                    servicer.test_adc_voltage,
                    request_deserializer=obc__pb2.test_adc_voltage_command_args.FromString,
                    response_serializer=obc__pb2.test_adc_voltage_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_adc_voltage': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_adc_voltage,
                    request_deserializer=obc__pb2.test_adc_voltage_command_args.FromString,
                    response_serializer=obc__pb2.test_adc_voltage_command_OBCResponse.SerializeToString,
            ),
            'test_large_payload_split': grpc.unary_unary_rpc_method_handler(
                    servicer.test_large_payload_split,
                    request_deserializer=obc__pb2.test_large_payload_split_command_args.FromString,
                    response_serializer=obc__pb2.test_large_payload_split_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_large_payload_split': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_large_payload_split,
                    request_deserializer=obc__pb2.test_large_payload_split_command_args.FromString,
                    response_serializer=obc__pb2.test_large_payload_split_command_OBCResponse.SerializeToString,
            ),
            'test_mram_rw': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mram_rw,
                    request_deserializer=obc__pb2.test_mram_rw_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_rw_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mram_rw': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mram_rw,
                    request_deserializer=obc__pb2.test_mram_rw_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_rw_command_OBCResponse.SerializeToString,
            ),
            'test_mram_write': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mram_write,
                    request_deserializer=obc__pb2.test_mram_write_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_write_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mram_write': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mram_write,
                    request_deserializer=obc__pb2.test_mram_write_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_write_command_OBCResponse.SerializeToString,
            ),
            'test_mram_read': grpc.unary_unary_rpc_method_handler(
                    servicer.test_mram_read,
                    request_deserializer=obc__pb2.test_mram_read_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_read_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_mram_read': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_mram_read,
                    request_deserializer=obc__pb2.test_mram_read_command_args.FromString,
                    response_serializer=obc__pb2.test_mram_read_command_OBCResponse.SerializeToString,
            ),
            'test_telem_glv': grpc.unary_unary_rpc_method_handler(
                    servicer.test_telem_glv,
                    request_deserializer=obc__pb2.test_telem_glv_command_args.FromString,
                    response_serializer=obc__pb2.test_telem_glv_command_OBCResponse.SerializeToString,
            ),
            'schedule_test_telem_glv': grpc.unary_stream_rpc_method_handler(
                    servicer.schedule_test_telem_glv,
                    request_deserializer=obc__pb2.test_telem_glv_command_args.FromString,
                    response_serializer=obc__pb2.test_telem_glv_command_OBCResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'obc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('obc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class obc(object):
    """Reminder: NO float only double, due to node floating point precision (IEEE 754 double precision)
    field name cant be https://github.com/protocolbuffers/protobuf-javascript/blob/main/generator/js_generator.cc#L60-L73

    """

    @staticmethod
    def log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/log',
            obc__pb2.log_args.SerializeToString,
            obc__pb2.log_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/reset',
            obc__pb2.reset_command_args.SerializeToString,
            obc__pb2.reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_reset',
            obc__pb2.reset_command_args.SerializeToString,
            obc__pb2.reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/ping',
            obc__pb2.ping_command_args.SerializeToString,
            obc__pb2.ping_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_ping',
            obc__pb2.ping_command_args.SerializeToString,
            obc__pb2.ping_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/get_time',
            obc__pb2.get_time_command_args.SerializeToString,
            obc__pb2.get_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_get_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_get_time',
            obc__pb2.get_time_command_args.SerializeToString,
            obc__pb2.get_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def set_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/set_time',
            obc__pb2.set_time_command_args.SerializeToString,
            obc__pb2.set_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_set_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_set_time',
            obc__pb2.set_time_command_args.SerializeToString,
            obc__pb2.set_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_min_stack_space(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/get_min_stack_space',
            obc__pb2.get_min_stack_space_command_args.SerializeToString,
            obc__pb2.get_min_stack_space_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_get_min_stack_space(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_get_min_stack_space',
            obc__pb2.get_min_stack_space_command_args.SerializeToString,
            obc__pb2.get_min_stack_space_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def capture_rtos_trace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/capture_rtos_trace',
            obc__pb2.capture_rtos_trace_command_args.SerializeToString,
            obc__pb2.capture_rtos_trace_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_capture_rtos_trace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_capture_rtos_trace',
            obc__pb2.capture_rtos_trace_command_args.SerializeToString,
            obc__pb2.capture_rtos_trace_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rtos_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/rtos_state',
            obc__pb2.rtos_state_command_args.SerializeToString,
            obc__pb2.rtos_state_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_rtos_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_rtos_state',
            obc__pb2.rtos_state_command_args.SerializeToString,
            obc__pb2.rtos_state_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def low_power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/low_power',
            obc__pb2.low_power_command_args.SerializeToString,
            obc__pb2.low_power_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_low_power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_low_power',
            obc__pb2.low_power_command_args.SerializeToString,
            obc__pb2.low_power_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sys_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/sys_time',
            obc__pb2.sys_time_command_args.SerializeToString,
            obc__pb2.sys_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_sys_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_sys_time',
            obc__pb2.sys_time_command_args.SerializeToString,
            obc__pb2.sys_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cpu_usage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/cpu_usage',
            obc__pb2.cpu_usage_command_args.SerializeToString,
            obc__pb2.cpu_usage_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_cpu_usage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_cpu_usage',
            obc__pb2.cpu_usage_command_args.SerializeToString,
            obc__pb2.cpu_usage_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def task_runtime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/task_runtime',
            obc__pb2.task_runtime_command_args.SerializeToString,
            obc__pb2.task_runtime_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_task_runtime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_task_runtime',
            obc__pb2.task_runtime_command_args.SerializeToString,
            obc__pb2.task_runtime_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gpio_exp_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gpio_exp_reset',
            obc__pb2.gpio_exp_reset_command_args.SerializeToString,
            obc__pb2.gpio_exp_reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gpio_exp_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gpio_exp_reset',
            obc__pb2.gpio_exp_reset_command_args.SerializeToString,
            obc__pb2.gpio_exp_reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def i2c_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/i2c_reset',
            obc__pb2.i2c_reset_command_args.SerializeToString,
            obc__pb2.i2c_reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_i2c_reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_i2c_reset',
            obc__pb2.i2c_reset_command_args.SerializeToString,
            obc__pb2.i2c_reset_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/heartbeat',
            obc__pb2.heartbeat_command_args.SerializeToString,
            obc__pb2.heartbeat_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_heartbeat',
            obc__pb2.heartbeat_command_args.SerializeToString,
            obc__pb2.heartbeat_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_restart',
            obc__pb2.gps_restart_command_args.SerializeToString,
            obc__pb2.gps_restart_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_restart',
            obc__pb2.gps_restart_command_args.SerializeToString,
            obc__pb2.gps_restart_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def fw_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/fw_info',
            obc__pb2.fw_info_command_args.SerializeToString,
            obc__pb2.fw_info_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_fw_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_fw_info',
            obc__pb2.fw_info_command_args.SerializeToString,
            obc__pb2.fw_info_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def wmm_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/wmm_init',
            obc__pb2.wmm_init_command_args.SerializeToString,
            obc__pb2.wmm_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_wmm_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_wmm_init',
            obc__pb2.wmm_init_command_args.SerializeToString,
            obc__pb2.wmm_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def wmm_is_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/wmm_is_init',
            obc__pb2.wmm_is_init_command_args.SerializeToString,
            obc__pb2.wmm_is_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_wmm_is_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_wmm_is_init',
            obc__pb2.wmm_is_init_command_args.SerializeToString,
            obc__pb2.wmm_is_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def wmm_get_mag_ref(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/wmm_get_mag_ref',
            obc__pb2.wmm_get_mag_ref_command_args.SerializeToString,
            obc__pb2.wmm_get_mag_ref_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_wmm_get_mag_ref(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_wmm_get_mag_ref',
            obc__pb2.wmm_get_mag_ref_command_args.SerializeToString,
            obc__pb2.wmm_get_mag_ref_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_query_sw_ver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_query_sw_ver',
            obc__pb2.gps_query_sw_ver_command_args.SerializeToString,
            obc__pb2.gps_query_sw_ver_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_query_sw_ver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_query_sw_ver',
            obc__pb2.gps_query_sw_ver_command_args.SerializeToString,
            obc__pb2.gps_query_sw_ver_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_set_factory_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_set_factory_settings',
            obc__pb2.gps_set_factory_settings_command_args.SerializeToString,
            obc__pb2.gps_set_factory_settings_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_set_factory_settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_set_factory_settings',
            obc__pb2.gps_set_factory_settings_command_args.SerializeToString,
            obc__pb2.gps_set_factory_settings_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_configure_power_mode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_configure_power_mode',
            obc__pb2.gps_configure_power_mode_command_args.SerializeToString,
            obc__pb2.gps_configure_power_mode_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_configure_power_mode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_configure_power_mode',
            obc__pb2.gps_configure_power_mode_command_args.SerializeToString,
            obc__pb2.gps_configure_power_mode_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_query_power_mode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_query_power_mode',
            obc__pb2.gps_query_power_mode_command_args.SerializeToString,
            obc__pb2.gps_query_power_mode_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_query_power_mode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_query_power_mode',
            obc__pb2.gps_query_power_mode_command_args.SerializeToString,
            obc__pb2.gps_query_power_mode_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_query_sw_crc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_query_sw_crc',
            obc__pb2.gps_query_sw_crc_command_args.SerializeToString,
            obc__pb2.gps_query_sw_crc_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_query_sw_crc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_query_sw_crc',
            obc__pb2.gps_query_sw_crc_command_args.SerializeToString,
            obc__pb2.gps_query_sw_crc_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_configure_position_upate_rate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_configure_position_upate_rate',
            obc__pb2.gps_configure_position_upate_rate_command_args.SerializeToString,
            obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_configure_position_upate_rate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_configure_position_upate_rate',
            obc__pb2.gps_configure_position_upate_rate_command_args.SerializeToString,
            obc__pb2.gps_configure_position_upate_rate_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_query_position_update_rate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_query_position_update_rate',
            obc__pb2.gps_query_position_update_rate_command_args.SerializeToString,
            obc__pb2.gps_query_position_update_rate_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_query_position_update_rate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_query_position_update_rate',
            obc__pb2.gps_query_position_update_rate_command_args.SerializeToString,
            obc__pb2.gps_query_position_update_rate_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_configure_nmea_messges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_configure_nmea_messges',
            obc__pb2.gps_configure_nmea_messges_command_args.SerializeToString,
            obc__pb2.gps_configure_nmea_messges_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_configure_nmea_messges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_configure_nmea_messges',
            obc__pb2.gps_configure_nmea_messges_command_args.SerializeToString,
            obc__pb2.gps_configure_nmea_messges_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_query_nmea_messges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_query_nmea_messges',
            obc__pb2.gps_query_nmea_messges_command_args.SerializeToString,
            obc__pb2.gps_query_nmea_messges_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_query_nmea_messges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_query_nmea_messges',
            obc__pb2.gps_query_nmea_messges_command_args.SerializeToString,
            obc__pb2.gps_query_nmea_messges_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_configure_serial_port(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_configure_serial_port',
            obc__pb2.gps_configure_serial_port_command_args.SerializeToString,
            obc__pb2.gps_configure_serial_port_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_configure_serial_port(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_configure_serial_port',
            obc__pb2.gps_configure_serial_port_command_args.SerializeToString,
            obc__pb2.gps_configure_serial_port_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def gps_configure_nav_msg_interval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/gps_configure_nav_msg_interval',
            obc__pb2.gps_configure_nav_msg_interval_command_args.SerializeToString,
            obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_gps_configure_nav_msg_interval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_gps_configure_nav_msg_interval',
            obc__pb2.gps_configure_nav_msg_interval_command_args.SerializeToString,
            obc__pb2.gps_configure_nav_msg_interval_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_uptime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/get_uptime',
            obc__pb2.get_uptime_command_args.SerializeToString,
            obc__pb2.get_uptime_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_get_uptime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_get_uptime',
            obc__pb2.get_uptime_command_args.SerializeToString,
            obc__pb2.get_uptime_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def flash_sleep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/flash_sleep',
            obc__pb2.flash_sleep_command_args.SerializeToString,
            obc__pb2.flash_sleep_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_flash_sleep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_flash_sleep',
            obc__pb2.flash_sleep_command_args.SerializeToString,
            obc__pb2.flash_sleep_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_telemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/get_telemetry',
            obc__pb2.get_telemetry_command_args.SerializeToString,
            obc__pb2.get_telemetry_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_get_telemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_get_telemetry',
            obc__pb2.get_telemetry_command_args.SerializeToString,
            obc__pb2.get_telemetry_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_echo',
            obc__pb2.test_echo_command_args.SerializeToString,
            obc__pb2.test_echo_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_echo',
            obc__pb2.test_echo_command_args.SerializeToString,
            obc__pb2.test_echo_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_hang(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_hang',
            obc__pb2.test_hang_command_args.SerializeToString,
            obc__pb2.test_hang_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_hang(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_hang',
            obc__pb2.test_hang_command_args.SerializeToString,
            obc__pb2.test_hang_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_comms_tx_rx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_comms_tx_rx',
            obc__pb2.test_comms_tx_rx_command_args.SerializeToString,
            obc__pb2.test_comms_tx_rx_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_comms_tx_rx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_comms_tx_rx',
            obc__pb2.test_comms_tx_rx_command_args.SerializeToString,
            obc__pb2.test_comms_tx_rx_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_comms_stress1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_comms_stress1',
            obc__pb2.test_comms_stress1_command_args.SerializeToString,
            obc__pb2.test_comms_stress1_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_comms_stress1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_comms_stress1',
            obc__pb2.test_comms_stress1_command_args.SerializeToString,
            obc__pb2.test_comms_stress1_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_comms_flash_app(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_comms_flash_app',
            obc__pb2.test_comms_flash_app_command_args.SerializeToString,
            obc__pb2.test_comms_flash_app_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_comms_flash_app(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_comms_flash_app',
            obc__pb2.test_comms_flash_app_command_args.SerializeToString,
            obc__pb2.test_comms_flash_app_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_comms_reboot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_comms_reboot',
            obc__pb2.test_comms_reboot_command_args.SerializeToString,
            obc__pb2.test_comms_reboot_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_comms_reboot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_comms_reboot',
            obc__pb2.test_comms_reboot_command_args.SerializeToString,
            obc__pb2.test_comms_reboot_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_comms_get_telem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_comms_get_telem',
            obc__pb2.test_comms_get_telem_command_args.SerializeToString,
            obc__pb2.test_comms_get_telem_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_comms_get_telem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_comms_get_telem',
            obc__pb2.test_comms_get_telem_command_args.SerializeToString,
            obc__pb2.test_comms_get_telem_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_float(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_float',
            obc__pb2.test_eps_read_float_command_args.SerializeToString,
            obc__pb2.test_eps_read_float_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_float(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_float',
            obc__pb2.test_eps_read_float_command_args.SerializeToString,
            obc__pb2.test_eps_read_float_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_float_raw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_float_raw',
            obc__pb2.test_eps_read_float_raw_command_args.SerializeToString,
            obc__pb2.test_eps_read_float_raw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_float_raw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_float_raw',
            obc__pb2.test_eps_read_float_raw_command_args.SerializeToString,
            obc__pb2.test_eps_read_float_raw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_int(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_int',
            obc__pb2.test_eps_read_int_command_args.SerializeToString,
            obc__pb2.test_eps_read_int_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_int(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_int',
            obc__pb2.test_eps_read_int_command_args.SerializeToString,
            obc__pb2.test_eps_read_int_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_write',
            obc__pb2.test_eps_write_command_args.SerializeToString,
            obc__pb2.test_eps_write_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_write',
            obc__pb2.test_eps_write_command_args.SerializeToString,
            obc__pb2.test_eps_write_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_sanity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_sanity',
            obc__pb2.test_eps_read_sanity_command_args.SerializeToString,
            obc__pb2.test_eps_read_sanity_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_sanity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_sanity',
            obc__pb2.test_eps_read_sanity_command_args.SerializeToString,
            obc__pb2.test_eps_read_sanity_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_writeread_sanity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_writeread_sanity',
            obc__pb2.test_eps_writeread_sanity_command_args.SerializeToString,
            obc__pb2.test_eps_writeread_sanity_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_writeread_sanity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_writeread_sanity',
            obc__pb2.test_eps_writeread_sanity_command_args.SerializeToString,
            obc__pb2.test_eps_writeread_sanity_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_measure_buses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_measure_buses',
            obc__pb2.test_eps_measure_buses_command_args.SerializeToString,
            obc__pb2.test_eps_measure_buses_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_measure_buses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_measure_buses',
            obc__pb2.test_eps_measure_buses_command_args.SerializeToString,
            obc__pb2.test_eps_measure_buses_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_measure_temps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_measure_temps',
            obc__pb2.test_eps_measure_temps_command_args.SerializeToString,
            obc__pb2.test_eps_measure_temps_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_measure_temps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_measure_temps',
            obc__pb2.test_eps_measure_temps_command_args.SerializeToString,
            obc__pb2.test_eps_measure_temps_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_counters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_counters',
            obc__pb2.test_eps_read_counters_command_args.SerializeToString,
            obc__pb2.test_eps_read_counters_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_counters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_counters',
            obc__pb2.test_eps_read_counters_command_args.SerializeToString,
            obc__pb2.test_eps_read_counters_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_eps_read_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_eps_read_status',
            obc__pb2.test_eps_read_status_command_args.SerializeToString,
            obc__pb2.test_eps_read_status_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_eps_read_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_eps_read_status',
            obc__pb2.test_eps_read_status_command_args.SerializeToString,
            obc__pb2.test_eps_read_status_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mag',
            obc__pb2.test_mag_command_args.SerializeToString,
            obc__pb2.test_mag_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mag',
            obc__pb2.test_mag_command_args.SerializeToString,
            obc__pb2.test_mag_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mag_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mag_all',
            obc__pb2.test_mag_all_command_args.SerializeToString,
            obc__pb2.test_mag_all_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mag_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mag_all',
            obc__pb2.test_mag_all_command_args.SerializeToString,
            obc__pb2.test_mag_all_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mag_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mag_init',
            obc__pb2.test_mag_init_command_args.SerializeToString,
            obc__pb2.test_mag_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mag_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mag_init',
            obc__pb2.test_mag_init_command_args.SerializeToString,
            obc__pb2.test_mag_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_imu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_imu',
            obc__pb2.test_imu_command_args.SerializeToString,
            obc__pb2.test_imu_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_imu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_imu',
            obc__pb2.test_imu_command_args.SerializeToString,
            obc__pb2.test_imu_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_panel_gyro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_panel_gyro',
            obc__pb2.test_panel_gyro_command_args.SerializeToString,
            obc__pb2.test_panel_gyro_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_panel_gyro(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_panel_gyro',
            obc__pb2.test_panel_gyro_command_args.SerializeToString,
            obc__pb2.test_panel_gyro_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_can_gpio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_can_gpio',
            obc__pb2.test_can_gpio_command_args.SerializeToString,
            obc__pb2.test_can_gpio_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_can_gpio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_can_gpio',
            obc__pb2.test_can_gpio_command_args.SerializeToString,
            obc__pb2.test_can_gpio_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_flash_rw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_flash_rw',
            obc__pb2.test_flash_rw_command_args.SerializeToString,
            obc__pb2.test_flash_rw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_flash_rw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_flash_rw',
            obc__pb2.test_flash_rw_command_args.SerializeToString,
            obc__pb2.test_flash_rw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_filesystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_filesystem',
            obc__pb2.test_filesystem_command_args.SerializeToString,
            obc__pb2.test_filesystem_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_filesystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_filesystem',
            obc__pb2.test_filesystem_command_args.SerializeToString,
            obc__pb2.test_filesystem_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_cam_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_cam_init',
            obc__pb2.test_cam_init_command_args.SerializeToString,
            obc__pb2.test_cam_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_cam_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_cam_init',
            obc__pb2.test_cam_init_command_args.SerializeToString,
            obc__pb2.test_cam_init_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_cam_capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_cam_capture',
            obc__pb2.test_cam_capture_command_args.SerializeToString,
            obc__pb2.test_cam_capture_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_cam_capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_cam_capture',
            obc__pb2.test_cam_capture_command_args.SerializeToString,
            obc__pb2.test_cam_capture_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_cam_wr_sreg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_cam_wr_sreg',
            obc__pb2.test_cam_wr_sreg_command_args.SerializeToString,
            obc__pb2.test_cam_wr_sreg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_cam_wr_sreg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_cam_wr_sreg',
            obc__pb2.test_cam_wr_sreg_command_args.SerializeToString,
            obc__pb2.test_cam_wr_sreg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_cam_rd_sreg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_cam_rd_sreg',
            obc__pb2.test_cam_rd_sreg_command_args.SerializeToString,
            obc__pb2.test_cam_rd_sreg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_cam_rd_sreg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_cam_rd_sreg',
            obc__pb2.test_cam_rd_sreg_command_args.SerializeToString,
            obc__pb2.test_cam_rd_sreg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_cam_wr_sregs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_cam_wr_sregs',
            obc__pb2.test_cam_wr_sregs_command_args.SerializeToString,
            obc__pb2.test_cam_wr_sregs_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_cam_wr_sregs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_cam_wr_sregs',
            obc__pb2.test_cam_wr_sregs_command_args.SerializeToString,
            obc__pb2.test_cam_wr_sregs_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_dsplib(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_dsplib',
            obc__pb2.test_dsplib_command_args.SerializeToString,
            obc__pb2.test_dsplib_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_dsplib(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_dsplib',
            obc__pb2.test_dsplib_command_args.SerializeToString,
            obc__pb2.test_dsplib_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_quest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_quest',
            obc__pb2.test_quest_command_args.SerializeToString,
            obc__pb2.test_quest_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_quest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_quest',
            obc__pb2.test_quest_command_args.SerializeToString,
            obc__pb2.test_quest_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_rtc_get_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_rtc_get_time',
            obc__pb2.test_rtc_get_time_command_args.SerializeToString,
            obc__pb2.test_rtc_get_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_rtc_get_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_rtc_get_time',
            obc__pb2.test_rtc_get_time_command_args.SerializeToString,
            obc__pb2.test_rtc_get_time_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_rtc_cap_and_get_timestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_rtc_cap_and_get_timestamp',
            obc__pb2.test_rtc_cap_and_get_timestamp_command_args.SerializeToString,
            obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_rtc_cap_and_get_timestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_rtc_cap_and_get_timestamp',
            obc__pb2.test_rtc_cap_and_get_timestamp_command_args.SerializeToString,
            obc__pb2.test_rtc_cap_and_get_timestamp_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def debug_read_rtc_reg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/debug_read_rtc_reg',
            obc__pb2.debug_read_rtc_reg_command_args.SerializeToString,
            obc__pb2.debug_read_rtc_reg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_debug_read_rtc_reg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_debug_read_rtc_reg',
            obc__pb2.debug_read_rtc_reg_command_args.SerializeToString,
            obc__pb2.debug_read_rtc_reg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def debug_write_rtc_reg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/debug_write_rtc_reg',
            obc__pb2.debug_write_rtc_reg_command_args.SerializeToString,
            obc__pb2.debug_write_rtc_reg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_debug_write_rtc_reg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_debug_write_rtc_reg',
            obc__pb2.debug_write_rtc_reg_command_args.SerializeToString,
            obc__pb2.debug_write_rtc_reg_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_rtc_alarm_n_sec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_rtc_alarm_n_sec',
            obc__pb2.test_rtc_alarm_n_sec_command_args.SerializeToString,
            obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_rtc_alarm_n_sec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_rtc_alarm_n_sec',
            obc__pb2.test_rtc_alarm_n_sec_command_args.SerializeToString,
            obc__pb2.test_rtc_alarm_n_sec_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_adcs_sun_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_adcs_sun_model',
            obc__pb2.test_adcs_sun_model_command_args.SerializeToString,
            obc__pb2.test_adcs_sun_model_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_adcs_sun_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_adcs_sun_model',
            obc__pb2.test_adcs_sun_model_command_args.SerializeToString,
            obc__pb2.test_adcs_sun_model_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_adc_voltage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_adc_voltage',
            obc__pb2.test_adc_voltage_command_args.SerializeToString,
            obc__pb2.test_adc_voltage_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_adc_voltage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_adc_voltage',
            obc__pb2.test_adc_voltage_command_args.SerializeToString,
            obc__pb2.test_adc_voltage_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_large_payload_split(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_large_payload_split',
            obc__pb2.test_large_payload_split_command_args.SerializeToString,
            obc__pb2.test_large_payload_split_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_large_payload_split(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_large_payload_split',
            obc__pb2.test_large_payload_split_command_args.SerializeToString,
            obc__pb2.test_large_payload_split_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mram_rw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mram_rw',
            obc__pb2.test_mram_rw_command_args.SerializeToString,
            obc__pb2.test_mram_rw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mram_rw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mram_rw',
            obc__pb2.test_mram_rw_command_args.SerializeToString,
            obc__pb2.test_mram_rw_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mram_write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mram_write',
            obc__pb2.test_mram_write_command_args.SerializeToString,
            obc__pb2.test_mram_write_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mram_write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mram_write',
            obc__pb2.test_mram_write_command_args.SerializeToString,
            obc__pb2.test_mram_write_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_mram_read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_mram_read',
            obc__pb2.test_mram_read_command_args.SerializeToString,
            obc__pb2.test_mram_read_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_mram_read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_mram_read',
            obc__pb2.test_mram_read_command_args.SerializeToString,
            obc__pb2.test_mram_read_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def test_telem_glv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/obc/test_telem_glv',
            obc__pb2.test_telem_glv_command_args.SerializeToString,
            obc__pb2.test_telem_glv_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def schedule_test_telem_glv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/obc/schedule_test_telem_glv',
            obc__pb2.test_telem_glv_command_args.SerializeToString,
            obc__pb2.test_telem_glv_command_OBCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
