/* tslint:disable */
/* eslint-disable */
/**
 * Command Request
 * abcd
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common.js';
import type { RequestArgs } from './base.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base.js';

/**
 * 
 * @export
 * @interface AddLocationTrackRequest
 */
export interface AddLocationTrackRequest {
    /**
     * 
     * @type {number}
     * @memberof AddLocationTrackRequest
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof AddLocationTrackRequest
     */
    'lng': number;
    /**
     * 
     * @type {string}
     * @memberof AddLocationTrackRequest
     */
    't': string;
}
/**
 * 
 * @export
 * @interface CreateImageRequestParameter
 */
export interface CreateImageRequestParameter {
    /**
     * 
     * @type {string}
     * @memberof CreateImageRequestParameter
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateImageRequestParameter
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'satelliteLocationLat': number;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'satelliteLocationLng': number;
    /**
     * 
     * @type {string}
     * @memberof CreateImageRequestParameter
     */
    'satelliteLocationT': string;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'satelliteRotationX': number;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'satelliteRotationY': number;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'satelliteRotationZ': number;
    /**
     * 
     * @type {number}
     * @memberof CreateImageRequestParameter
     */
    'AROgroundStationId': number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateImageRequestParameter
     */
    'AROgroundStationPassRise': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateImageRequestParameter
     */
    'AROgroundStationPassSet': string | null;
}
/**
 * 
 * @export
 * @interface GetImageRequestPreview200Response
 */
export interface GetImageRequestPreview200Response {
    /**
     * 
     * @type {string}
     * @memberof GetImageRequestPreview200Response
     */
    'base64': string;
}
/**
 * 
 * @export
 * @interface ImageRequest
 */
export interface ImageRequest {
    /**
     * 
     * @type {LocationTrack}
     * @memberof ImageRequest
     */
    'locationTrack': LocationTrack;
    /**
     * 
     * @type {ImageRequestImage}
     * @memberof ImageRequest
     */
    'thumbnail': ImageRequestImage | null;
    /**
     * 
     * @type {ImageRequestImage}
     * @memberof ImageRequest
     */
    'initialPreviewImage': ImageRequestImage | null;
    /**
     * 
     * @type {ImageRequestImage}
     * @memberof ImageRequest
     */
    'finalPreviewImage': ImageRequestImage | null;
    /**
     * 
     * @type {ImageRequestImage}
     * @memberof ImageRequest
     */
    'image': ImageRequestImage | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'locationTrackId': string;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'satelliteRotationX': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'satelliteRotationY': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'satelliteRotationZ': number;
    /**
     * 
     * @type {number}
     * @memberof ImageRequest
     */
    'AROgroundStationId': number | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'AROgroundStationPassId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'reviewerId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequest
     */
    'approved': boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'reviewComment': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'initialPreviewImageId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequest
     */
    'finalPreviewImageId': string | null;
}
/**
 * 
 * @export
 * @interface ImageRequestImage
 */
export interface ImageRequestImage {
    /**
     * 
     * @type {string}
     * @memberof ImageRequestImage
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ImageRequestImage
     */
    'imageId': string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageRequestImage
     */
    'placeholderId': string | null;
}
/**
 * 
 * @export
 * @interface ImageRequestVaildationError
 */
export interface ImageRequestVaildationError {
    /**
     * 
     * @type {ImageRequestVaildationErrorPass}
     * @memberof ImageRequestVaildationError
     */
    'pass': ImageRequestVaildationErrorPass;
    /**
     * 
     * @type {ImageRequestVaildationErrorImage}
     * @memberof ImageRequestVaildationError
     */
    'image': ImageRequestVaildationErrorImage;
    /**
     * 
     * @type {ImageRequestVaildationErrorARO}
     * @memberof ImageRequestVaildationError
     */
    'ARO': ImageRequestVaildationErrorARO;
}
/**
 * 
 * @export
 * @interface ImageRequestVaildationErrorARO
 */
export interface ImageRequestVaildationErrorARO {
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorARO
     */
    'passTimeCollide': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorARO
     */
    'unauthorizedGroundStation': boolean;
}
/**
 * 
 * @export
 * @interface ImageRequestVaildationErrorImage
 */
export interface ImageRequestVaildationErrorImage {
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorImage
     */
    'invalidFraming': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorImage
     */
    'commandTimeCollide': boolean;
}
/**
 * 
 * @export
 * @interface ImageRequestVaildationErrorPass
 */
export interface ImageRequestVaildationErrorPass {
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorPass
     */
    'commandTimeCollide': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ImageRequestVaildationErrorPass
     */
    'insufficientMemory': boolean;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lat': number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'lng': number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'alt': number;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    't': string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'stateElementId': string | null;
}
/**
 * 
 * @export
 * @interface LocationTrack
 */
export interface LocationTrack {
    /**
     * 
     * @type {string}
     * @memberof LocationTrack
     */
    'id': string;
    /**
     * 
     * @type {Location}
     * @memberof LocationTrack
     */
    'initialLocation': Location;
    /**
     * 
     * @type {Location}
     * @memberof LocationTrack
     */
    'currentLocation': Location;
    /**
     * 
     * @type {Location}
     * @memberof LocationTrack
     */
    'finalLocation': Location | null;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The HTTP status code
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * The error
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface OptionalImageRequest
 */
export interface OptionalImageRequest {
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'locationTrackId'?: string;
    /**
     * 
     * @type {number}
     * @memberof OptionalImageRequest
     */
    'satelliteRotationX'?: number;
    /**
     * 
     * @type {number}
     * @memberof OptionalImageRequest
     */
    'satelliteRotationY'?: number;
    /**
     * 
     * @type {number}
     * @memberof OptionalImageRequest
     */
    'satelliteRotationZ'?: number;
    /**
     * 
     * @type {number}
     * @memberof OptionalImageRequest
     */
    'AROgroundStationId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'AROgroundStationPassId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'reviewerId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OptionalImageRequest
     */
    'approved'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'reviewComment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'initialPreviewImageId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OptionalImageRequest
     */
    'finalPreviewImageId'?: string | null;
}
/**
 * An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * The details of the problem
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * The HTTP status code
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * The type of error (text)
     * @type {string}
     * @memberof Problem
     */
    'title': string;
    /**
     * The type of error (URL)
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
}

/**
 * ImageRequestApi - axios parameter creator
 * @export
 */
export const ImageRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a image request
         * @summary Create a image request
         * @param {CreateImageRequestParameter} createImageRequestParameter The ImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageRequest: async (createImageRequestParameter: CreateImageRequestParameter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createImageRequestParameter' is not null or undefined
            assertParamExists('addImageRequest', 'createImageRequestParameter', createImageRequestParameter)
            const localVarPath = `/image-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createImageRequestParameter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a image request
         * @summary Delete a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageRequest: async (imageRequestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequestId' is not null or undefined
            assertParamExists('deleteImageRequest', 'imageRequestId', imageRequestId)
            const localVarPath = `/image-request/{imageRequestId}`
                .replace(`{${"imageRequestId"}}`, encodeURIComponent(String(imageRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a image request
         * @summary Get a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequest: async (imageRequestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequestId' is not null or undefined
            assertParamExists('getImageRequest', 'imageRequestId', imageRequestId)
            const localVarPath = `/image-request/{imageRequestId}`
                .replace(`{${"imageRequestId"}}`, encodeURIComponent(String(imageRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the initialPreviewImage image of the image request
         * @summary Get the initialPreviewImage image of the image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequestInitialPreviewImage: async (imageRequestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequestId' is not null or undefined
            assertParamExists('getImageRequestInitialPreviewImage', 'imageRequestId', imageRequestId)
            const localVarPath = `/image-request/{imageRequestId}/initialPreviewImage`
                .replace(`{${"imageRequestId"}}`, encodeURIComponent(String(imageRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the preview image of the image request
         * @summary Get the preview image of the image request
         * @param {number} satLat The latitude of the satellite
         * @param {number} satLng The longitude of the satellite
         * @param {number} satAlt The altitude of the satellite from ground
         * @param {number} satRotX The X component of the satellite rotation/orientation
         * @param {number} satRotY The Y component of the satellite rotation/orientation
         * @param {number} satRotZ The Z component of the satellite rotation/orientation
         * @param {boolean} [base64] Generate base64 encoded image. Default false return jpg image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequestPreview: async (satLat: number, satLng: number, satAlt: number, satRotX: number, satRotY: number, satRotZ: number, base64?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'satLat' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satLat', satLat)
            // verify required parameter 'satLng' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satLng', satLng)
            // verify required parameter 'satAlt' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satAlt', satAlt)
            // verify required parameter 'satRotX' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satRotX', satRotX)
            // verify required parameter 'satRotY' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satRotY', satRotY)
            // verify required parameter 'satRotZ' is not null or undefined
            assertParamExists('getImageRequestPreview', 'satRotZ', satRotZ)
            const localVarPath = `/image-request/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (satLat !== undefined) {
                localVarQueryParameter['SatLat'] = satLat;
            }

            if (satLng !== undefined) {
                localVarQueryParameter['SatLng'] = satLng;
            }

            if (satAlt !== undefined) {
                localVarQueryParameter['SatAlt'] = satAlt;
            }

            if (satRotX !== undefined) {
                localVarQueryParameter['SatRotX'] = satRotX;
            }

            if (satRotY !== undefined) {
                localVarQueryParameter['SatRotY'] = satRotY;
            }

            if (satRotZ !== undefined) {
                localVarQueryParameter['SatRotZ'] = satRotZ;
            }

            if (base64 !== undefined) {
                localVarQueryParameter['base64'] = base64;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all image request
         * @summary Get all image request
         * @param {string} [owner] Owner of image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequests: async (owner?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/image-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch a image request
         * @summary Patch a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {OptionalImageRequest} optionalImageRequest The ImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchImageRequest: async (imageRequestId: string, optionalImageRequest: OptionalImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageRequestId' is not null or undefined
            assertParamExists('patchImageRequest', 'imageRequestId', imageRequestId)
            // verify required parameter 'optionalImageRequest' is not null or undefined
            assertParamExists('patchImageRequest', 'optionalImageRequest', optionalImageRequest)
            const localVarPath = `/image-request/{imageRequestId}`
                .replace(`{${"imageRequestId"}}`, encodeURIComponent(String(imageRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(optionalImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageRequestApi - functional programming interface
 * @export
 */
export const ImageRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a image request
         * @summary Create a image request
         * @param {CreateImageRequestParameter} createImageRequestParameter The ImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addImageRequest(createImageRequestParameter: CreateImageRequestParameter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addImageRequest(createImageRequestParameter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.addImageRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a image request
         * @summary Delete a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImageRequest(imageRequestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImageRequest(imageRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.deleteImageRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a image request
         * @summary Get a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageRequest(imageRequestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageRequest(imageRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.getImageRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the initialPreviewImage image of the image request
         * @summary Get the initialPreviewImage image of the image request
         * @param {string} imageRequestId The Id of the image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageRequestInitialPreviewImage(imageRequestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageRequestInitialPreviewImage(imageRequestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.getImageRequestInitialPreviewImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the preview image of the image request
         * @summary Get the preview image of the image request
         * @param {number} satLat The latitude of the satellite
         * @param {number} satLng The longitude of the satellite
         * @param {number} satAlt The altitude of the satellite from ground
         * @param {number} satRotX The X component of the satellite rotation/orientation
         * @param {number} satRotY The Y component of the satellite rotation/orientation
         * @param {number} satRotZ The Z component of the satellite rotation/orientation
         * @param {boolean} [base64] Generate base64 encoded image. Default false return jpg image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageRequestPreview(satLat: number, satLng: number, satAlt: number, satRotX: number, satRotY: number, satRotZ: number, base64?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetImageRequestPreview200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageRequestPreview(satLat, satLng, satAlt, satRotX, satRotY, satRotZ, base64, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.getImageRequestPreview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all image request
         * @summary Get all image request
         * @param {string} [owner] Owner of image request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageRequests(owner?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageRequest>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageRequests(owner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.getImageRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch a image request
         * @summary Patch a image request
         * @param {string} imageRequestId The Id of the image request
         * @param {OptionalImageRequest} optionalImageRequest The ImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchImageRequest(imageRequestId: string, optionalImageRequest: OptionalImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchImageRequest(imageRequestId, optionalImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageRequestApi.patchImageRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageRequestApi - factory interface
 * @export
 */
export const ImageRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageRequestApiFp(configuration)
    return {
        /**
         * Create a image request
         * @summary Create a image request
         * @param {ImageRequestApiAddImageRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageRequest(requestParameters: ImageRequestApiAddImageRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageRequest> {
            return localVarFp.addImageRequest(requestParameters.createImageRequestParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a image request
         * @summary Delete a image request
         * @param {ImageRequestApiDeleteImageRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageRequest(requestParameters: ImageRequestApiDeleteImageRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteImageRequest(requestParameters.imageRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a image request
         * @summary Get a image request
         * @param {ImageRequestApiGetImageRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequest(requestParameters: ImageRequestApiGetImageRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageRequest> {
            return localVarFp.getImageRequest(requestParameters.imageRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the initialPreviewImage image of the image request
         * @summary Get the initialPreviewImage image of the image request
         * @param {ImageRequestApiGetImageRequestInitialPreviewImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequestInitialPreviewImage(requestParameters: ImageRequestApiGetImageRequestInitialPreviewImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getImageRequestInitialPreviewImage(requestParameters.imageRequestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the preview image of the image request
         * @summary Get the preview image of the image request
         * @param {ImageRequestApiGetImageRequestPreviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequestPreview(requestParameters: ImageRequestApiGetImageRequestPreviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetImageRequestPreview200Response> {
            return localVarFp.getImageRequestPreview(requestParameters.satLat, requestParameters.satLng, requestParameters.satAlt, requestParameters.satRotX, requestParameters.satRotY, requestParameters.satRotZ, requestParameters.base64, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all image request
         * @summary Get all image request
         * @param {ImageRequestApiGetImageRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageRequests(requestParameters: ImageRequestApiGetImageRequestsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageRequest>> {
            return localVarFp.getImageRequests(requestParameters.owner, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch a image request
         * @summary Patch a image request
         * @param {ImageRequestApiPatchImageRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchImageRequest(requestParameters: ImageRequestApiPatchImageRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.patchImageRequest(requestParameters.imageRequestId, requestParameters.optionalImageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addImageRequest operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiAddImageRequestRequest
 */
export interface ImageRequestApiAddImageRequestRequest {
    /**
     * The ImageRequest
     * @type {CreateImageRequestParameter}
     * @memberof ImageRequestApiAddImageRequest
     */
    readonly createImageRequestParameter: CreateImageRequestParameter
}

/**
 * Request parameters for deleteImageRequest operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiDeleteImageRequestRequest
 */
export interface ImageRequestApiDeleteImageRequestRequest {
    /**
     * The Id of the image request
     * @type {string}
     * @memberof ImageRequestApiDeleteImageRequest
     */
    readonly imageRequestId: string
}

/**
 * Request parameters for getImageRequest operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiGetImageRequestRequest
 */
export interface ImageRequestApiGetImageRequestRequest {
    /**
     * The Id of the image request
     * @type {string}
     * @memberof ImageRequestApiGetImageRequest
     */
    readonly imageRequestId: string
}

/**
 * Request parameters for getImageRequestInitialPreviewImage operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiGetImageRequestInitialPreviewImageRequest
 */
export interface ImageRequestApiGetImageRequestInitialPreviewImageRequest {
    /**
     * The Id of the image request
     * @type {string}
     * @memberof ImageRequestApiGetImageRequestInitialPreviewImage
     */
    readonly imageRequestId: string
}

/**
 * Request parameters for getImageRequestPreview operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiGetImageRequestPreviewRequest
 */
export interface ImageRequestApiGetImageRequestPreviewRequest {
    /**
     * The latitude of the satellite
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satLat: number

    /**
     * The longitude of the satellite
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satLng: number

    /**
     * The altitude of the satellite from ground
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satAlt: number

    /**
     * The X component of the satellite rotation/orientation
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satRotX: number

    /**
     * The Y component of the satellite rotation/orientation
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satRotY: number

    /**
     * The Z component of the satellite rotation/orientation
     * @type {number}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly satRotZ: number

    /**
     * Generate base64 encoded image. Default false return jpg image
     * @type {boolean}
     * @memberof ImageRequestApiGetImageRequestPreview
     */
    readonly base64?: boolean
}

/**
 * Request parameters for getImageRequests operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiGetImageRequestsRequest
 */
export interface ImageRequestApiGetImageRequestsRequest {
    /**
     * Owner of image request
     * @type {string}
     * @memberof ImageRequestApiGetImageRequests
     */
    readonly owner?: string
}

/**
 * Request parameters for patchImageRequest operation in ImageRequestApi.
 * @export
 * @interface ImageRequestApiPatchImageRequestRequest
 */
export interface ImageRequestApiPatchImageRequestRequest {
    /**
     * The Id of the image request
     * @type {string}
     * @memberof ImageRequestApiPatchImageRequest
     */
    readonly imageRequestId: string

    /**
     * The ImageRequest
     * @type {OptionalImageRequest}
     * @memberof ImageRequestApiPatchImageRequest
     */
    readonly optionalImageRequest: OptionalImageRequest
}

/**
 * ImageRequestApi - object-oriented interface
 * @export
 * @class ImageRequestApi
 * @extends {BaseAPI}
 */
export class ImageRequestApi extends BaseAPI {
    /**
     * Create a image request
     * @summary Create a image request
     * @param {ImageRequestApiAddImageRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public addImageRequest(requestParameters: ImageRequestApiAddImageRequestRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).addImageRequest(requestParameters.createImageRequestParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a image request
     * @summary Delete a image request
     * @param {ImageRequestApiDeleteImageRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public deleteImageRequest(requestParameters: ImageRequestApiDeleteImageRequestRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).deleteImageRequest(requestParameters.imageRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a image request
     * @summary Get a image request
     * @param {ImageRequestApiGetImageRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public getImageRequest(requestParameters: ImageRequestApiGetImageRequestRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).getImageRequest(requestParameters.imageRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the initialPreviewImage image of the image request
     * @summary Get the initialPreviewImage image of the image request
     * @param {ImageRequestApiGetImageRequestInitialPreviewImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public getImageRequestInitialPreviewImage(requestParameters: ImageRequestApiGetImageRequestInitialPreviewImageRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).getImageRequestInitialPreviewImage(requestParameters.imageRequestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the preview image of the image request
     * @summary Get the preview image of the image request
     * @param {ImageRequestApiGetImageRequestPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public getImageRequestPreview(requestParameters: ImageRequestApiGetImageRequestPreviewRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).getImageRequestPreview(requestParameters.satLat, requestParameters.satLng, requestParameters.satAlt, requestParameters.satRotX, requestParameters.satRotY, requestParameters.satRotZ, requestParameters.base64, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all image request
     * @summary Get all image request
     * @param {ImageRequestApiGetImageRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public getImageRequests(requestParameters: ImageRequestApiGetImageRequestsRequest = {}, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).getImageRequests(requestParameters.owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch a image request
     * @summary Patch a image request
     * @param {ImageRequestApiPatchImageRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageRequestApi
     */
    public patchImageRequest(requestParameters: ImageRequestApiPatchImageRequestRequest, options?: RawAxiosRequestConfig) {
        return ImageRequestApiFp(this.configuration).patchImageRequest(requestParameters.imageRequestId, requestParameters.optionalImageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocationTrackApi - axios parameter creator
 * @export
 */
export const LocationTrackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a location track
         * @summary Create a location track
         * @param {AddLocationTrackRequest} addLocationTrackRequest The location to track
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocationTrack: async (addLocationTrackRequest: AddLocationTrackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addLocationTrackRequest' is not null or undefined
            assertParamExists('addLocationTrack', 'addLocationTrackRequest', addLocationTrackRequest)
            const localVarPath = `/locationTracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addLocationTrackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a location track
         * @summary Get a location track
         * @param {string} locationTrackId The Id of the location track
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationTrack: async (locationTrackId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationTrackId' is not null or undefined
            assertParamExists('getLocationTrack', 'locationTrackId', locationTrackId)
            const localVarPath = `/locationTrack/{locationTrackId}`
                .replace(`{${"locationTrackId"}}`, encodeURIComponent(String(locationTrackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdateLocationTrack: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhooks/update-location-track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationTrackApi - functional programming interface
 * @export
 */
export const LocationTrackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationTrackApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a location track
         * @summary Create a location track
         * @param {AddLocationTrackRequest} addLocationTrackRequest The location to track
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLocationTrack(addLocationTrackRequest: AddLocationTrackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationTrack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLocationTrack(addLocationTrackRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationTrackApi.addLocationTrack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a location track
         * @summary Get a location track
         * @param {string} locationTrackId The Id of the location track
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationTrack(locationTrackId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationTrack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationTrack(locationTrackId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationTrackApi.getLocationTrack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookUpdateLocationTrack(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookUpdateLocationTrack(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LocationTrackApi.webhookUpdateLocationTrack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LocationTrackApi - factory interface
 * @export
 */
export const LocationTrackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationTrackApiFp(configuration)
    return {
        /**
         * Create a location track
         * @summary Create a location track
         * @param {LocationTrackApiAddLocationTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLocationTrack(requestParameters: LocationTrackApiAddLocationTrackRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationTrack> {
            return localVarFp.addLocationTrack(requestParameters.addLocationTrackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a location track
         * @summary Get a location track
         * @param {LocationTrackApiGetLocationTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationTrack(requestParameters: LocationTrackApiGetLocationTrackRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationTrack> {
            return localVarFp.getLocationTrack(requestParameters.locationTrackId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdateLocationTrack(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.webhookUpdateLocationTrack(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addLocationTrack operation in LocationTrackApi.
 * @export
 * @interface LocationTrackApiAddLocationTrackRequest
 */
export interface LocationTrackApiAddLocationTrackRequest {
    /**
     * The location to track
     * @type {AddLocationTrackRequest}
     * @memberof LocationTrackApiAddLocationTrack
     */
    readonly addLocationTrackRequest: AddLocationTrackRequest
}

/**
 * Request parameters for getLocationTrack operation in LocationTrackApi.
 * @export
 * @interface LocationTrackApiGetLocationTrackRequest
 */
export interface LocationTrackApiGetLocationTrackRequest {
    /**
     * The Id of the location track
     * @type {string}
     * @memberof LocationTrackApiGetLocationTrack
     */
    readonly locationTrackId: string
}

/**
 * LocationTrackApi - object-oriented interface
 * @export
 * @class LocationTrackApi
 * @extends {BaseAPI}
 */
export class LocationTrackApi extends BaseAPI {
    /**
     * Create a location track
     * @summary Create a location track
     * @param {LocationTrackApiAddLocationTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationTrackApi
     */
    public addLocationTrack(requestParameters: LocationTrackApiAddLocationTrackRequest, options?: RawAxiosRequestConfig) {
        return LocationTrackApiFp(this.configuration).addLocationTrack(requestParameters.addLocationTrackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a location track
     * @summary Get a location track
     * @param {LocationTrackApiGetLocationTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationTrackApi
     */
    public getLocationTrack(requestParameters: LocationTrackApiGetLocationTrackRequest, options?: RawAxiosRequestConfig) {
        return LocationTrackApiFp(this.configuration).getLocationTrack(requestParameters.locationTrackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the location track from new data
     * @summary Update the location track from new data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationTrackApi
     */
    public webhookUpdateLocationTrack(options?: RawAxiosRequestConfig) {
        return LocationTrackApiFp(this.configuration).webhookUpdateLocationTrack(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdateLocationTrack: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhooks/update-location-track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookUpdateLocationTrack(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookUpdateLocationTrack(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhookApi.webhookUpdateLocationTrack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * Update the location track from new data
         * @summary Update the location track from new data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookUpdateLocationTrack(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.webhookUpdateLocationTrack(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
    /**
     * Update the location track from new data
     * @summary Update the location track from new data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhookUpdateLocationTrack(options?: RawAxiosRequestConfig) {
        return WebhookApiFp(this.configuration).webhookUpdateLocationTrack(options).then((request) => request(this.axios, this.basePath));
    }
}



