/* tslint:disable */
/* eslint-disable */
/**
 * Mission Service
 * Service to manage the missions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ReadCommand } from './ReadCommand.js';
import {
    ReadCommandFromJSON,
    ReadCommandFromJSONTyped,
    ReadCommandToJSON,
} from './ReadCommand.js';

/**
 * 
 * @export
 * @interface ReadMission
 */
export interface ReadMission {
    /**
     * 
     * @type {string}
     * @memberof ReadMission
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReadMission
     */
    fwVersion: string;
    /**
     * 
     * @type {Date}
     * @memberof ReadMission
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ReadMission
     */
    userId: string;
    /**
     * 
     * @type {Date}
     * @memberof ReadMission
     */
    scheduledAt: Date | null;
    /**
     * The status of the mission
     * @type {string}
     * @memberof ReadMission
     */
    status: ReadMissionStatusEnum;
    /**
     * The error message if the mission has failed
     * @type {string}
     * @memberof ReadMission
     */
    error: string | null;
    /**
     * 
     * @type {Array<ReadCommand>}
     * @memberof ReadMission
     */
    commands: Array<ReadCommand>;
}


/**
 * @export
 */
export const ReadMissionStatusEnum = {
    Created: 'created',
    Scheduled: 'scheduled',
    Sent: 'sent',
    Error: 'error'
} as const;
export type ReadMissionStatusEnum = typeof ReadMissionStatusEnum[keyof typeof ReadMissionStatusEnum];


/**
 * Check if a given object implements the ReadMission interface.
 */
export function instanceOfReadMission(value: object): value is ReadMission {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('fwVersion' in value) || value['fwVersion'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('scheduledAt' in value) || value['scheduledAt'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('error' in value) || value['error'] === undefined) return false;
    if (!('commands' in value) || value['commands'] === undefined) return false;
    return true;
}

export function ReadMissionFromJSON(json: any): ReadMission {
    return ReadMissionFromJSONTyped(json, false);
}

export function ReadMissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReadMission {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'fwVersion': json['fwVersion'],
        'createdAt': (new Date(json['createdAt'])),
        'userId': json['userId'],
        'scheduledAt': (json['scheduledAt'] == null ? null : new Date(json['scheduledAt'])),
        'status': json['status'],
        'error': json['error'],
        'commands': ((json['commands'] as Array<any>).map(ReadCommandFromJSON)),
    };
}

export function ReadMissionToJSON(value?: ReadMission | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'fwVersion': value['fwVersion'],
        'createdAt': ((value['createdAt']).toISOString()),
        'userId': value['userId'],
        'scheduledAt': (value['scheduledAt'] == null ? null : (value['scheduledAt'] as any).toISOString()),
        'status': value['status'],
        'error': value['error'],
        'commands': ((value['commands'] as Array<any>).map(ReadCommandToJSON)),
    };
}

