/* tslint:disable */
/* eslint-disable */
/**
 * Orbit Propagation
 * abcd
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Pass,
  Passes,
  Problem,
} from '../models/index.js';
import {
    PassFromJSON,
    PassToJSON,
    PassesFromJSON,
    PassesToJSON,
    ProblemFromJSON,
    ProblemToJSON,
} from '../models/index.js';

export interface FindFullPassesRequest {
    latitude: number;
    longitude: number;
    start: Date;
    minElevation: number;
}

export interface FindPassesRequest {
    latitude: number;
    longitude: number;
    start: Date;
    end: Date;
    minElevation: number;
}

export interface GetGroundTrackRequest {
    t: Date;
}

/**
 * 
 */
export class OrbitPropagationApi extends runtime.BaseAPI {

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async findFullPassesRaw(requestParameters: FindFullPassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passes>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling findFullPasses().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling findFullPasses().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling findFullPasses().'
            );
        }

        if (requestParameters['minElevation'] == null) {
            throw new runtime.RequiredError(
                'minElevation',
                'Required parameter "minElevation" was null or undefined when calling findFullPasses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['minElevation'] != null) {
            queryParameters['minElevation'] = requestParameters['minElevation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orbit-propagation/full-passes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PassesFromJSON(jsonValue));
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async findFullPasses(requestParameters: FindFullPassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passes> {
        const response = await this.findFullPassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async findPassesRaw(requestParameters: FindPassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Passes>> {
        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling findPasses().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling findPasses().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling findPasses().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling findPasses().'
            );
        }

        if (requestParameters['minElevation'] == null) {
            throw new runtime.RequiredError(
                'minElevation',
                'Required parameter "minElevation" was null or undefined when calling findPasses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['minElevation'] != null) {
            queryParameters['minElevation'] = requestParameters['minElevation'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orbit-propagation/passes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PassesFromJSON(jsonValue));
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async findPasses(requestParameters: FindPassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Passes> {
        const response = await this.findPassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find information of the pass by time
     * Find information of the pass
     */
    async getGroundTrackRaw(requestParameters: GetGroundTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pass>> {
        if (requestParameters['t'] == null) {
            throw new runtime.RequiredError(
                't',
                'Required parameter "t" was null or undefined when calling getGroundTrack().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['t'] != null) {
            queryParameters['t'] = (requestParameters['t'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orbit-propagation/ground-track`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PassFromJSON(jsonValue));
    }

    /**
     * Find information of the pass by time
     * Find information of the pass
     */
    async getGroundTrack(requestParameters: GetGroundTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pass> {
        const response = await this.getGroundTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find information of the pass by time
     * Find information of the pass
     */
    async webhooksNewGmatOrbitPropagationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks/new-gmat-orbit-propagation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Find information of the pass by time
     * Find information of the pass
     */
    async webhooksNewGmatOrbitPropagation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.webhooksNewGmatOrbitPropagationRaw(initOverrides);
        return await response.value();
    }

}
