/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/missions": {
    /**
     * Get all missions
     * @description Get all missions
     */
    get: operations["getMissions"];
    /**
     * Create a new mission
     * @description Create a new mission
     */
    post: operations["createMission"];
  };
  "/missions/{missionId}": {
    /**
     * Get a mission
     * @description Get a mission by its ID
     */
    get: operations["getMission"];
    /** Update mission by ID */
    patch: operations["patchMission"];
  };
  "/missions/{missionId}/commands": {
  };
  "/missions/{missionId}/commands/{commandId}": {
    /**
     * Patch a command
     * @description Patch a command within a mission
     */
    patch: operations["patchCommand"];
  };
  "/imageRequests": {
    /** Get all image requests */
    get: operations["getImageRequests"];
    /**
     * Create an image request
     * @description Create an image request
     */
    post: operations["createImageRequest"];
  };
  "/imageRequests/{id}": {
    /** Get a specific image request */
    get: operations["getImageRequestById"];
    /** Update an image request */
    put: operations["updateImageRequest"];
    /** Delete an image request */
    delete: operations["deleteImageRequest"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ReadMission: WithRequired<{
      /** Format: uuid */
      id?: string;
      fwVersion?: string;
      /** Format: date-time */
      createdAt?: string;
      userId?: string;
      /** Format: date-time */
      scheduledAt?: string | null;
      /**
       * @description The status of the mission
       * @enum {string}
       */
      status?: "created" | "scheduled" | "sent" | "error";
      /** @description The error message if the mission has failed */
      error?: string | null;
      commands?: components["schemas"]["ReadCommand"][];
    }, "id" | "fwVersion" | "createdAt" | "userId" | "scheduledAt" | "status" | "error" | "commands">;
    WriteMission: WithRequired<{
      fwVersion?: string;
      /** Format: date-time */
      scheduledAt?: string | null;
      commands?: components["schemas"]["WriteCommand"][];
    }, "fwVersion" | "commands">;
    UpdateMission: {
      /**
       * @description The status of the mission
       * @enum {string}
       */
      status?: "created" | "scheduled" | "sent" | "error";
      /** @description The error message if the mission has failed */
      error?: string | null;
    };
    ReadCommand: {
      /** Format: uuid */
      id: string;
      sequenceNumber: number;
      commandId: number;
      commandName: string;
      timeOffset: number;
      arguments: string[];
      /** Format: date-time */
      sentAt: string | null;
      /** Format: date-time */
      ranAt: string | null;
      error: boolean | null;
      responses: string[];
    };
    WriteCommand: {
      sequenceNumber: number;
      commandId: number;
      commandName: string;
      timeOffset?: number;
      arguments: string[];
    };
    UpdateCommand: {
      /** Format: date-time */
      sentAt?: string | null;
      /** Format: date-time */
      ranAt?: string | null;
      error?: boolean | null;
      responses?: string[];
    };
    ReadImageRequest: {
      /** Format: uuid */
      id: string;
      /** Format: float */
      coordX: number;
      /** Format: float */
      coordY: number;
      /** Format: float */
      coordZ: number;
      /** Format: float */
      QuaternionW: number;
      /** Format: float */
      QuaternionX: number;
      /** Format: float */
      QuaternionY: number;
      /** Format: float */
      QuaternionZ: number;
      /** Format: float */
      fStop: number;
      /** Format: float */
      focus: number;
      /** Format: float */
      ISO: number;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      requestedAt: string;
      /** Format: date-time */
      completedAt: string | null;
      status: components["schemas"]["ImageRequestStatusEnum"];
      retryCount: number;
    };
    WriteImageRequest: {
      /** Format: float */
      coordX: number;
      /** Format: float */
      coordY: number;
      /** Format: float */
      coordZ: number;
      /** Format: float */
      QuaternionW: number;
      /** Format: float */
      QuaternionX: number;
      /** Format: float */
      QuaternionY: number;
      /** Format: float */
      QuaternionZ: number;
      /** Format: float */
      fStop: number;
      /** Format: float */
      focus: number;
      /** Format: float */
      ISO: number;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      requestedAt: string;
    };
    UpdateImageRequest: {
      /** Format: uuid */
      id?: string;
      /** Format: float */
      coordX?: number;
      /** Format: float */
      coordY?: number;
      /** Format: float */
      coordZ?: number;
      /** Format: float */
      QuaternionW?: number;
      /** Format: float */
      QuaternionX?: number;
      /** Format: float */
      QuaternionY?: number;
      /** Format: float */
      QuaternionZ?: number;
      /** Format: date-time */
      requestedAt?: string;
      /** Format: float */
      fStop?: number;
      /** Format: float */
      focus?: number;
      /** Format: float */
      ISO?: number;
      /** Format: date-time */
      completedAt?: string;
      status?: components["schemas"]["ImageRequestStatusEnum"];
      /** Format: uuid */
      userId?: string;
      retryCount?: number;
    };
    DeleteImageRequest: {
      /**
       * Format: uuid
       * @description The unique identifier of the image to be deleted.
       */
      id: string;
      /**
       * Format: uuid
       * @description The unique identifier of the user requesting the deletion.
       */
      userId: string;
    };
    /** @enum {string} */
    ImageRequestStatusEnum: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED";
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all missions
   * @description Get all missions
   */
  getMissions: {
    parameters: {
      query?: {
        /** @description Filter the missions by their sent status */
        sent?: boolean;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMission"][];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Create a new mission
   * @description Create a new mission
   */
  createMission: {
    /** @description New mission object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteMission"];
      };
    };
    responses: {
      /** @description Mission created successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMission"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get a mission
   * @description Get a mission by its ID
   */
  getMission: {
    parameters: {
      path: {
        /** @description ID of the mission to retrieve */
        missionId: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMission"];
        };
      };
      /** @description Mission not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Update mission by ID */
  patchMission: {
    parameters: {
      path: {
        missionId: string;
      };
    };
    /** @description Mission object that needs to be updated */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMission"];
      };
    };
    responses: {
      /** @description Mission updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ReadMission"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Mission not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Patch a command
   * @description Patch a command within a mission
   */
  patchCommand: {
    parameters: {
      path: {
        /** @description ID of the mission */
        missionId: string;
        /** @description ID of the command to patch */
        commandId: string;
      };
    };
    /** @description Patched command object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCommand"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ReadCommand"];
        };
      };
      /** @description Mission or command not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get all image requests */
  getImageRequests: {
    parameters: {
      query?: {
        /** @description Filter requests by status */
        status?: string;
        /** @description Filter requests by user ID */
        userId?: string;
        /** @description Filter requests by the date that the image request was made. */
        requestedAt?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadImageRequest"][];
        };
      };
    };
  };
  /**
   * Create an image request
   * @description Create an image request
   */
  createImageRequest: {
    /** @description New ImageRequest object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteImageRequest"];
      };
    };
    responses: {
      /** @description Image request created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ReadImageRequest"];
        };
      };
      /** @description Bad request due to missing or invalid data */
      400: {
        content: {
          "application/json": {
            /** @example Invalid coordinate values */
            error?: string;
          };
        };
      };
      /** @description Unauthorized - Authentication required */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not found - Resource does not exist */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error - Unexpected issue */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get a specific image request */
  getImageRequestById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["ReadImageRequest"];
        };
      };
      /** @description Image request not found */
      404: {
        content: never;
      };
    };
  };
  /** Update an image request */
  updateImageRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateImageRequest"];
      };
    };
    responses: {
      /** @description Image request updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ReadImageRequest"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Image request not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an image request */
  deleteImageRequest: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteImageRequest"];
      };
    };
    responses: {
      /** @description Image request deleted successfully */
      204: {
        content: never;
      };
      /** @description Invalid input, perhaps missing or malformed request data */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Image request not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
