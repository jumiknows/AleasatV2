/* tslint:disable */
/* eslint-disable */
/**
 * Mission Service
 * Service to manage the missions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface ReadCommand
 */
export interface ReadCommand {
    /**
     * 
     * @type {string}
     * @memberof ReadCommand
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof ReadCommand
     */
    sequenceNumber: number;
    /**
     * 
     * @type {number}
     * @memberof ReadCommand
     */
    commandId: number;
    /**
     * 
     * @type {string}
     * @memberof ReadCommand
     */
    commandName: string;
    /**
     * 
     * @type {number}
     * @memberof ReadCommand
     */
    timeOffset: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReadCommand
     */
    arguments: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof ReadCommand
     */
    sentAt: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ReadCommand
     */
    ranAt: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof ReadCommand
     */
    error: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReadCommand
     */
    responses: Array<string>;
}

/**
 * Check if a given object implements the ReadCommand interface.
 */
export function instanceOfReadCommand(value: object): value is ReadCommand {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sequenceNumber' in value) || value['sequenceNumber'] === undefined) return false;
    if (!('commandId' in value) || value['commandId'] === undefined) return false;
    if (!('commandName' in value) || value['commandName'] === undefined) return false;
    if (!('timeOffset' in value) || value['timeOffset'] === undefined) return false;
    if (!('arguments' in value) || value['arguments'] === undefined) return false;
    if (!('sentAt' in value) || value['sentAt'] === undefined) return false;
    if (!('ranAt' in value) || value['ranAt'] === undefined) return false;
    if (!('error' in value) || value['error'] === undefined) return false;
    if (!('responses' in value) || value['responses'] === undefined) return false;
    return true;
}

export function ReadCommandFromJSON(json: any): ReadCommand {
    return ReadCommandFromJSONTyped(json, false);
}

export function ReadCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReadCommand {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sequenceNumber': json['sequenceNumber'],
        'commandId': json['commandId'],
        'commandName': json['commandName'],
        'timeOffset': json['timeOffset'],
        'arguments': json['arguments'],
        'sentAt': (json['sentAt'] == null ? null : new Date(json['sentAt'])),
        'ranAt': (json['ranAt'] == null ? null : new Date(json['ranAt'])),
        'error': json['error'],
        'responses': json['responses'],
    };
}

export function ReadCommandToJSON(value?: ReadCommand | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'sequenceNumber': value['sequenceNumber'],
        'commandId': value['commandId'],
        'commandName': value['commandName'],
        'timeOffset': value['timeOffset'],
        'arguments': value['arguments'],
        'sentAt': (value['sentAt'] == null ? null : (value['sentAt'] as any).toISOString()),
        'ranAt': (value['ranAt'] == null ? null : (value['ranAt'] as any).toISOString()),
        'error': value['error'],
        'responses': value['responses'],
    };
}

