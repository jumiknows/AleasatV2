/* tslint:disable */
/* eslint-disable */
/**
 * GMAT
 * abcd
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GmatOrbitPropagation,
  Problem,
  SatelliteState,
} from '../models/index.js';
import {
    GmatOrbitPropagationFromJSON,
    GmatOrbitPropagationToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    SatelliteStateFromJSON,
    SatelliteStateToJSON,
} from '../models/index.js';

export interface UpdateGmatOrbitPropagationRequest {
    satelliteState: SatelliteState;
}

/**
 * 
 */
export class GmatApi extends runtime.BaseAPI {

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async getGmatOrbitPropagationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GmatOrbitPropagation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gmat/orbit-propagation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GmatOrbitPropagationFromJSON(jsonValue));
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async getGmatOrbitPropagation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GmatOrbitPropagation> {
        const response = await this.getGmatOrbitPropagationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async updateGmatOrbitPropagationRaw(requestParameters: UpdateGmatOrbitPropagationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['satelliteState'] == null) {
            throw new runtime.RequiredError(
                'satelliteState',
                'Required parameter "satelliteState" was null or undefined when calling updateGmatOrbitPropagation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/gmat/orbit-propagation`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SatelliteStateToJSON(requestParameters['satelliteState']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Find passes of the target location by time and location
     * Find passes of the target location
     */
    async updateGmatOrbitPropagation(requestParameters: UpdateGmatOrbitPropagationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateGmatOrbitPropagationRaw(requestParameters, initOverrides);
    }

}
