/* tslint:disable */
/* eslint-disable */
/**
 * Job Queue Service
 * Service to queue jobs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Problem,
  PropagationParams,
  ReadGMATJob,
  ReadOrbitPropagationJob,
  SatelliteState,
} from '../models/index.js';
import {
    ProblemFromJSON,
    ProblemToJSON,
    PropagationParamsFromJSON,
    PropagationParamsToJSON,
    ReadGMATJobFromJSON,
    ReadGMATJobToJSON,
    ReadOrbitPropagationJobFromJSON,
    ReadOrbitPropagationJobToJSON,
    SatelliteStateFromJSON,
    SatelliteStateToJSON,
} from '../models/index.js';

export interface CreateGMATJobRequest {
    satelliteState: SatelliteState;
}

export interface CreateOrbitJobRequest {
    propagationParams: PropagationParams;
}

export interface DeleteJobRequest {
    jobId: string;
}

export interface GetGMATJobRequest {
    jobId: string;
}

export interface GetOrbitJobRequest {
    jobId: string;
}

/**
 * 
 */
export class JobApi extends runtime.BaseAPI {

    /**
     * Create and queue a GMAT job
     */
    async createGMATJobRaw(requestParameters: CreateGMATJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadGMATJob>> {
        if (requestParameters['satelliteState'] == null) {
            throw new runtime.RequiredError(
                'satelliteState',
                'Required parameter "satelliteState" was null or undefined when calling createGMATJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/gmat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SatelliteStateToJSON(requestParameters['satelliteState']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadGMATJobFromJSON(jsonValue));
    }

    /**
     * Create and queue a GMAT job
     */
    async createGMATJob(requestParameters: CreateGMATJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadGMATJob> {
        const response = await this.createGMATJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create and queue an orbit propagation job
     */
    async createOrbitJobRaw(requestParameters: CreateOrbitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadOrbitPropagationJob>> {
        if (requestParameters['propagationParams'] == null) {
            throw new runtime.RequiredError(
                'propagationParams',
                'Required parameter "propagationParams" was null or undefined when calling createOrbitJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/orbit-propagation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropagationParamsToJSON(requestParameters['propagationParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadOrbitPropagationJobFromJSON(jsonValue));
    }

    /**
     * Create and queue an orbit propagation job
     */
    async createOrbitJob(requestParameters: CreateOrbitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadOrbitPropagationJob> {
        const response = await this.createOrbitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a job by ID
     */
    async deleteJobRaw(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling deleteJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a job by ID
     */
    async deleteJob(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details for a GMAT job
     */
    async getGMATJobRaw(requestParameters: GetGMATJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadGMATJob>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getGMATJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/gmat/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadGMATJobFromJSON(jsonValue));
    }

    /**
     * Get details for a GMAT job
     */
    async getGMATJob(requestParameters: GetGMATJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadGMATJob> {
        const response = await this.getGMATJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get details for an orbit propagation job
     */
    async getOrbitJobRaw(requestParameters: GetOrbitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadOrbitPropagationJob>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getOrbitJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/jobs/orbit-propagation/{jobId}`.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadOrbitPropagationJobFromJSON(jsonValue));
    }

    /**
     * Get details for an orbit propagation job
     */
    async getOrbitJob(requestParameters: GetOrbitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadOrbitPropagationJob> {
        const response = await this.getOrbitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
