/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/commits": {
    /** Get all commits */
    get: operations["getCommits"];
  };
  "/commits/{commitHash}/file": {
    /** Get a file from a commit */
    get: operations["getFile"];
  };
  "/commits/{commitHash}/obc-config": {
    /** Get the OBC config from a commit */
    get: operations["getObcConfig"];
  };
  "/commits/{commitHash}/obc-proto": {
    /** Get the Proto File for OBC config from a commit */
    get: operations["getObcProto"];
  };
  "/commits/{commitHash}/obc-grpc-service": {
    /** Get the gRPC service for OBC config from a commit */
    get: operations["getObcGrpcService"];
  };
  "/branches": {
    /** Get all branches */
    get: operations["getBranches"];
  };
  "/branches/{branchName}/commits": {
    /** Get commits for a branch */
    get: operations["getBranchCommits"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ReadLaunchpad: {
      /**
       * Format: uuid
       * @description The Launchpad ID
       */
      id: string;
      /** @description The Launchpad name */
      name: string;
      node: string;
      port: string;
      serviceName: string;
      fwCommit: string;
      /** Format: uuid */
      userSessionId: string | null;
    };
    ReadUserSession: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      startAt: string;
      /** Format: date-time */
      endAt: string;
      /** Format: uuid */
      launchpadId: string;
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get all commits */
  getCommits: {
    parameters: {
      query?: {
        /** @description The number of commits to return */
        limit?: number;
        /** @description The number of commits to skip */
        offset?: number;
      };
    };
    responses: {
      /** @description A list of commits */
      200: {
        content: {
          "application/json": {
              hash: string;
              /** Format: date-time */
              date: string;
              message: string;
              refs: string;
              body: string;
              author_name: string;
              author_email: string;
            }[];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get a file from a commit */
  getFile: {
    parameters: {
      query: {
        /** @description The file path */
        filePath: string;
      };
      path: {
        /** @description The commit hash */
        commitHash: string;
      };
    };
    responses: {
      /** @description The file */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get the OBC config from a commit */
  getObcConfig: {
    parameters: {
      path: {
        /** @description The commit hash */
        commitHash: string;
      };
    };
    responses: {
      /** @description The OBC config */
      200: {
        content: {
          "application/json": {
            cmd_sys: {
              [key: string]: {
                id: number;
                args: {
                    [key: string]: string;
                  }[];
                resp: {
                    [key: string]: string;
                  }[] | null;
              };
            };
            cmd_sys_test: {
              [key: string]: {
                id: number;
                args: {
                    [key: string]: string;
                  }[];
                resp: {
                    [key: string]: string;
                  }[] | null;
              };
            };
            log_specs: {
              [key: string]: {
                id: number;
                description: string;
                signals?: {
                  [key: string]: {
                    level: string;
                    id: number;
                    description: string;
                    data?: {
                        [key: string]: string;
                      }[];
                  };
                };
              };
            };
            obc_tasks: {
              [key: string]: {
                id: number;
                stack_size: number;
                priority: number;
              };
            };
          };
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get the Proto File for OBC config from a commit */
  getObcProto: {
    parameters: {
      query?: {
        includeTestSpec?: boolean;
      };
      path: {
        /** @description The commit hash */
        commitHash: string;
      };
    };
    responses: {
      /** @description The OBC proto file */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get the gRPC service for OBC config from a commit */
  getObcGrpcService: {
    parameters: {
      query?: {
        includeTestSpec?: boolean;
      };
      path: {
        /** @description The commit hash */
        commitHash: string;
      };
    };
    responses: {
      /** @description The OBC gRPC service */
      200: {
        content: {
          "text/plain": string;
          "application/json": string;
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get all branches */
  getBranches: {
    responses: {
      /** @description A list of branches */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get commits for a branch */
  getBranchCommits: {
    parameters: {
      query?: {
        /** @description The number of commits to return */
        limit?: number;
        /** @description The number of commits to skip */
        offset?: number;
      };
      path: {
        /** @description The name of the branch */
        branchName: string;
      };
    };
    responses: {
      /** @description A list of commits */
      200: {
        content: {
          "application/json": {
              hash: string;
              /** Format: date-time */
              date: string;
              message: string;
              refs: string;
              body: string;
              author_name: string;
              author_email: string;
            }[];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
