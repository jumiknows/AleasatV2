/* tslint:disable */
/* eslint-disable */
/**
 * Mission Service
 * Service to manage the missions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Problem,
  ReadCommand,
  ReadMission,
  UpdateCommand,
  UpdateMission,
  WriteMission,
} from '../models/index.js';
import {
    ProblemFromJSON,
    ProblemToJSON,
    ReadCommandFromJSON,
    ReadCommandToJSON,
    ReadMissionFromJSON,
    ReadMissionToJSON,
    UpdateCommandFromJSON,
    UpdateCommandToJSON,
    UpdateMissionFromJSON,
    UpdateMissionToJSON,
    WriteMissionFromJSON,
    WriteMissionToJSON,
} from '../models/index.js';

export interface CreateMissionRequest {
    writeMission: WriteMission;
}

export interface GetMissionRequest {
    missionId: string;
}

export interface GetMissionsRequest {
    sent?: boolean;
}

export interface PatchCommandRequest {
    missionId: string;
    commandId: string;
    updateCommand: UpdateCommand;
}

export interface PatchMissionRequest {
    missionId: string;
    updateMission: UpdateMission;
}

/**
 * 
 */
export class MissionApi extends runtime.BaseAPI {

    /**
     * Create a new mission
     * Create a new mission
     */
    async createMissionRaw(requestParameters: CreateMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadMission>> {
        if (requestParameters['writeMission'] == null) {
            throw new runtime.RequiredError(
                'writeMission',
                'Required parameter "writeMission" was null or undefined when calling createMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/missions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteMissionToJSON(requestParameters['writeMission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadMissionFromJSON(jsonValue));
    }

    /**
     * Create a new mission
     * Create a new mission
     */
    async createMission(requestParameters: CreateMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadMission> {
        const response = await this.createMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a mission by its ID
     * Get a mission
     */
    async getMissionRaw(requestParameters: GetMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadMission>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling getMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/missions/{missionId}`.replace(`{${"missionId"}}`, encodeURIComponent(String(requestParameters['missionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadMissionFromJSON(jsonValue));
    }

    /**
     * Get a mission by its ID
     * Get a mission
     */
    async getMission(requestParameters: GetMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadMission> {
        const response = await this.getMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all missions
     * Get all missions
     */
    async getMissionsRaw(requestParameters: GetMissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadMission>>> {
        const queryParameters: any = {};

        if (requestParameters['sent'] != null) {
            queryParameters['sent'] = requestParameters['sent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/missions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadMissionFromJSON));
    }

    /**
     * Get all missions
     * Get all missions
     */
    async getMissions(requestParameters: GetMissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadMission>> {
        const response = await this.getMissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch a command within a mission
     * Patch a command
     */
    async patchCommandRaw(requestParameters: PatchCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadCommand>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling patchCommand().'
            );
        }

        if (requestParameters['commandId'] == null) {
            throw new runtime.RequiredError(
                'commandId',
                'Required parameter "commandId" was null or undefined when calling patchCommand().'
            );
        }

        if (requestParameters['updateCommand'] == null) {
            throw new runtime.RequiredError(
                'updateCommand',
                'Required parameter "updateCommand" was null or undefined when calling patchCommand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/missions/{missionId}/commands/{commandId}`.replace(`{${"missionId"}}`, encodeURIComponent(String(requestParameters['missionId']))).replace(`{${"commandId"}}`, encodeURIComponent(String(requestParameters['commandId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCommandToJSON(requestParameters['updateCommand']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadCommandFromJSON(jsonValue));
    }

    /**
     * Patch a command within a mission
     * Patch a command
     */
    async patchCommand(requestParameters: PatchCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadCommand> {
        const response = await this.patchCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update mission by ID
     */
    async patchMissionRaw(requestParameters: PatchMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadMission>> {
        if (requestParameters['missionId'] == null) {
            throw new runtime.RequiredError(
                'missionId',
                'Required parameter "missionId" was null or undefined when calling patchMission().'
            );
        }

        if (requestParameters['updateMission'] == null) {
            throw new runtime.RequiredError(
                'updateMission',
                'Required parameter "updateMission" was null or undefined when calling patchMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/missions/{missionId}`.replace(`{${"missionId"}}`, encodeURIComponent(String(requestParameters['missionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMissionToJSON(requestParameters['updateMission']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadMissionFromJSON(jsonValue));
    }

    /**
     * Update mission by ID
     */
    async patchMission(requestParameters: PatchMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadMission> {
        const response = await this.patchMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
