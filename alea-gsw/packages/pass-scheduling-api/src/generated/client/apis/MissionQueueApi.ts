/* tslint:disable */
/* eslint-disable */
/**
 * Pass Scheduling
 * abcd
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  PassSchedulingMissionWriteOnly,
  Problem,
  ReadMissionQueueMission,
} from '../models/index.js';
import {
    PassSchedulingMissionWriteOnlyFromJSON,
    PassSchedulingMissionWriteOnlyToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    ReadMissionQueueMissionFromJSON,
    ReadMissionQueueMissionToJSON,
} from '../models/index.js';

export interface QueueMissionRequest {
    passSchedulingMissionWriteOnly: PassSchedulingMissionWriteOnly;
}

/**
 * 
 */
export class MissionQueueApi extends runtime.BaseAPI {

    /**
     * Get missions in queue
     * Get missions in queue
     */
    async getQueuedMissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadMissionQueueMission>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mission-queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadMissionQueueMissionFromJSON));
    }

    /**
     * Get missions in queue
     * Get missions in queue
     */
    async getQueuedMissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadMissionQueueMission>> {
        const response = await this.getQueuedMissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Queue a mission
     * Queue a mission
     */
    async queueMissionRaw(requestParameters: QueueMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['passSchedulingMissionWriteOnly'] == null) {
            throw new runtime.RequiredError(
                'passSchedulingMissionWriteOnly',
                'Required parameter "passSchedulingMissionWriteOnly" was null or undefined when calling queueMission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mission-queue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PassSchedulingMissionWriteOnlyToJSON(requestParameters['passSchedulingMissionWriteOnly']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Queue a mission
     * Queue a mission
     */
    async queueMission(requestParameters: QueueMissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.queueMissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
