/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/orbit-propagation/passes": {
    /**
     * Find passes of the target location
     * @description Find passes of the target location by time and location
     */
    get: operations["findPasses"];
  };
  "/orbit-propagation/full-passes": {
    /**
     * Find passes of the target location
     * @description Find passes of the target location by time and location
     */
    get: operations["findFullPasses"];
  };
  "/orbit-propagation/ground-track": {
    /**
     * Find information of the pass
     * @description Find information of the pass by time
     */
    get: operations["getGroundTrack"];
  };
  "/webhooks/new-gmat-orbit-propagation": {
    /**
     * Find information of the pass
     * @description Find information of the pass by time
     */
    post: operations["webhooksNewGmatOrbitPropagation"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Passes: {
      latitude: number;
      longitude: number;
      stateId: string;
      stateElement: components["schemas"]["StateElement"];
      passes: {
          /** @example 10 */
          id: number;
          rise: {
            /** Format: date-time */
            t: string;
            x: number;
            y: number;
            z: number;
          };
          set: {
            /** Format: date-time */
            t: string;
            x: number;
            y: number;
            z: number;
          };
          culmination: {
            /** Format: date-time */
            t: string;
            /** @example 40.5 */
            alt: number;
            /** @example 263.15 */
            az: number;
            /** @example 45 */
            lat: number;
            /** @example -125 */
            lng: number;
            /** @example 432 */
            height: number;
            x: number;
            y: number;
            z: number;
          };
        }[];
    };
    Pass: {
      stateId: string;
      stateElement: components["schemas"]["StateElement"];
      ground_track: number[][];
    };
    StateElement: components["schemas"]["CartesianState"] | components["schemas"]["KeplerianState"];
    CartesianState: {
      /** @enum {string} */
      type: "cartesian";
      x: number;
      y: number;
      z: number;
      vx: number;
      vy: number;
      vz: number;
    };
    KeplerianState: {
      /** @enum {string} */
      type: "keplerian";
      sma: number;
      ecc: number;
      inc: number;
      raan: number;
      aop: number;
      ta: number;
    };
    Error: {
      /**
       * Format: int32
       * @description The HTTP status code
       */
      code: number;
      /** @description The error */
      message: string;
    };
    /** @description An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807). */
    Problem: {
      /** @description The details of the problem */
      detail?: string;
      /** @description The HTTP status code */
      status: number;
      /** @description The type of error (text) */
      title: string;
      /** @description The type of error (URL) */
      type?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Find passes of the target location
   * @description Find passes of the target location by time and location
   */
  findPasses: {
    parameters: {
      query: {
        /** @description Latitude of target location */
        latitude: number;
        /** @description Longitude of target location */
        longitude: number;
        /** @description Start time of the search */
        start: string;
        /** @description End time of the search */
        end: string;
        /** @description The minimum elevation to call it a pass */
        minElevation: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Passes"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Find passes of the target location
   * @description Find passes of the target location by time and location
   */
  findFullPasses: {
    parameters: {
      query: {
        /** @description Latitude of target location */
        latitude: number;
        /** @description Longitude of target location */
        longitude: number;
        /** @description Start time of the search */
        start: string;
        /** @description The minimum elevation to call it a pass */
        minElevation: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Passes"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Find information of the pass
   * @description Find information of the pass by time
   */
  getGroundTrack: {
    parameters: {
      query: {
        /** @description The time of the pass */
        t: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Pass"];
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
  /**
   * Find information of the pass
   * @description Find information of the pass by time
   */
  webhooksNewGmatOrbitPropagation: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description The request has failed. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/problem+json": components["schemas"]["Problem"];
        };
      };
    };
  };
}
