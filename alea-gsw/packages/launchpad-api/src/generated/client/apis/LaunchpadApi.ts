/* tslint:disable */
/* eslint-disable */
/**
 * LP Manager Service
 * Service to manage LP
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CreateLaunchpadUserSession200Response,
  Problem,
  ReadLaunchpad,
  ReadUserSession,
  UpdateLaunchpad,
  UpdateLaunchpadFirmware200Response,
  UpdateLaunchpadFirmwareRequest,
  WriteLaunchpad,
} from '../models/index.js';
import {
    CreateLaunchpadUserSession200ResponseFromJSON,
    CreateLaunchpadUserSession200ResponseToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    ReadLaunchpadFromJSON,
    ReadLaunchpadToJSON,
    ReadUserSessionFromJSON,
    ReadUserSessionToJSON,
    UpdateLaunchpadFromJSON,
    UpdateLaunchpadToJSON,
    UpdateLaunchpadFirmware200ResponseFromJSON,
    UpdateLaunchpadFirmware200ResponseToJSON,
    UpdateLaunchpadFirmwareRequestFromJSON,
    UpdateLaunchpadFirmwareRequestToJSON,
    WriteLaunchpadFromJSON,
    WriteLaunchpadToJSON,
} from '../models/index.js';

export interface CreateLaunchpadRequest {
    writeLaunchpad: WriteLaunchpad;
}

export interface CreateLaunchpadUserSessionRequest {
    launchpadId: string;
}

export interface DeleteLaunchpadRequest {
    launchpadId: string;
}

export interface GetLaunchpadRequest {
    launchpadId: string;
}

export interface GetLaunchpadFirmwareLogRequest {
    launchpadId: string;
    jobName: string;
}

export interface GetLaunchpadUserSessionRequest {
    launchpadId: string;
}

export interface PatchLaunchpadRequest {
    launchpadId: string;
    updateLaunchpad: UpdateLaunchpad;
}

export interface UpdateLaunchpadFirmwareOperationRequest {
    launchpadId: string;
    updateLaunchpadFirmwareRequest: UpdateLaunchpadFirmwareRequest;
}

/**
 * 
 */
export class LaunchpadApi extends runtime.BaseAPI {

    /**
     * Create a Launchpad object
     */
    async createLaunchpadRaw(requestParameters: CreateLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadLaunchpad>> {
        if (requestParameters['writeLaunchpad'] == null) {
            throw new runtime.RequiredError(
                'writeLaunchpad',
                'Required parameter "writeLaunchpad" was null or undefined when calling createLaunchpad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteLaunchpadToJSON(requestParameters['writeLaunchpad']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLaunchpadFromJSON(jsonValue));
    }

    /**
     * Create a Launchpad object
     */
    async createLaunchpad(requestParameters: CreateLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadLaunchpad> {
        const response = await this.createLaunchpadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a Launchpad User Session
     */
    async createLaunchpadUserSessionRaw(requestParameters: CreateLaunchpadUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateLaunchpadUserSession200Response>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling createLaunchpadUserSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}/userSession`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLaunchpadUserSession200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a Launchpad User Session
     */
    async createLaunchpadUserSession(requestParameters: CreateLaunchpadUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateLaunchpadUserSession200Response> {
        const response = await this.createLaunchpadUserSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Launchpad by ID
     */
    async deleteLaunchpadRaw(requestParameters: DeleteLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling deleteLaunchpad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete a Launchpad by ID
     */
    async deleteLaunchpad(requestParameters: DeleteLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteLaunchpadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Launchpad
     */
    async getLaunchpadRaw(requestParameters: GetLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadLaunchpad>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling getLaunchpad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLaunchpadFromJSON(jsonValue));
    }

    /**
     * Get a Launchpad
     */
    async getLaunchpad(requestParameters: GetLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadLaunchpad> {
        const response = await this.getLaunchpadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a stream for Launchpad Firmware deployment Log
     */
    async getLaunchpadFirmwareLogRaw(requestParameters: GetLaunchpadFirmwareLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling getLaunchpadFirmwareLog().'
            );
        }

        if (requestParameters['jobName'] == null) {
            throw new runtime.RequiredError(
                'jobName',
                'Required parameter "jobName" was null or undefined when calling getLaunchpadFirmwareLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['jobName'] != null) {
            queryParameters['jobName'] = requestParameters['jobName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}/firmware/log`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Start a stream for Launchpad Firmware deployment Log
     */
    async getLaunchpadFirmwareLog(requestParameters: GetLaunchpadFirmwareLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLaunchpadFirmwareLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Launchpad User Session
     */
    async getLaunchpadUserSessionRaw(requestParameters: GetLaunchpadUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadUserSession>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling getLaunchpadUserSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}/userSession`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadUserSessionFromJSON(jsonValue));
    }

    /**
     * Get a Launchpad User Session
     */
    async getLaunchpadUserSession(requestParameters: GetLaunchpadUserSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadUserSession> {
        const response = await this.getLaunchpadUserSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all Launchpads
     */
    async getLaunchpadsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadLaunchpad>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadLaunchpadFromJSON));
    }

    /**
     * Get all Launchpads
     */
    async getLaunchpads(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadLaunchpad>> {
        const response = await this.getLaunchpadsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a Launchpad object by ID
     */
    async patchLaunchpadRaw(requestParameters: PatchLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadLaunchpad>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling patchLaunchpad().'
            );
        }

        if (requestParameters['updateLaunchpad'] == null) {
            throw new runtime.RequiredError(
                'updateLaunchpad',
                'Required parameter "updateLaunchpad" was null or undefined when calling patchLaunchpad().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLaunchpadToJSON(requestParameters['updateLaunchpad']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLaunchpadFromJSON(jsonValue));
    }

    /**
     * Update a Launchpad object by ID
     */
    async patchLaunchpad(requestParameters: PatchLaunchpadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadLaunchpad> {
        const response = await this.patchLaunchpadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a Launchpad Firmware
     */
    async updateLaunchpadFirmwareRaw(requestParameters: UpdateLaunchpadFirmwareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateLaunchpadFirmware200Response>> {
        if (requestParameters['launchpadId'] == null) {
            throw new runtime.RequiredError(
                'launchpadId',
                'Required parameter "launchpadId" was null or undefined when calling updateLaunchpadFirmware().'
            );
        }

        if (requestParameters['updateLaunchpadFirmwareRequest'] == null) {
            throw new runtime.RequiredError(
                'updateLaunchpadFirmwareRequest',
                'Required parameter "updateLaunchpadFirmwareRequest" was null or undefined when calling updateLaunchpadFirmware().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/launchpads/{launchpadId}/firmware`.replace(`{${"launchpadId"}}`, encodeURIComponent(String(requestParameters['launchpadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLaunchpadFirmwareRequestToJSON(requestParameters['updateLaunchpadFirmwareRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateLaunchpadFirmware200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a Launchpad Firmware
     */
    async updateLaunchpadFirmware(requestParameters: UpdateLaunchpadFirmwareOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateLaunchpadFirmware200Response> {
        const response = await this.updateLaunchpadFirmwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
