/* tslint:disable */
/* eslint-disable */
/**
 * Mission Service
 * Service to manage the missions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CreateImageRequest400Response,
  DeleteImageRequest,
  ReadImageRequest,
  UpdateImageRequest,
  WriteImageRequest,
} from '../models/index.js';
import {
    CreateImageRequest400ResponseFromJSON,
    CreateImageRequest400ResponseToJSON,
    DeleteImageRequestFromJSON,
    DeleteImageRequestToJSON,
    ReadImageRequestFromJSON,
    ReadImageRequestToJSON,
    UpdateImageRequestFromJSON,
    UpdateImageRequestToJSON,
    WriteImageRequestFromJSON,
    WriteImageRequestToJSON,
} from '../models/index.js';

export interface CreateImageRequestRequest {
    writeImageRequest: WriteImageRequest;
}

export interface DeleteImageRequestRequest {
    id: string;
    deleteImageRequest: DeleteImageRequest;
}

export interface GetImageRequestByIdRequest {
    id: string;
}

export interface GetImageRequestsRequest {
    status?: string;
    userId?: string;
    requestedAt?: string;
}

export interface UpdateImageRequestRequest {
    id: string;
    updateImageRequest: UpdateImageRequest | null;
}

/**
 * 
 */
export class ImageRequestApi extends runtime.BaseAPI {

    /**
     * Create an image request
     * Create an image request
     */
    async createImageRequestRaw(requestParameters: CreateImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadImageRequest>> {
        if (requestParameters['writeImageRequest'] == null) {
            throw new runtime.RequiredError(
                'writeImageRequest',
                'Required parameter "writeImageRequest" was null or undefined when calling createImageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/imageRequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteImageRequestToJSON(requestParameters['writeImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageRequestFromJSON(jsonValue));
    }

    /**
     * Create an image request
     * Create an image request
     */
    async createImageRequest(requestParameters: CreateImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadImageRequest> {
        const response = await this.createImageRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an image request
     */
    async deleteImageRequestRaw(requestParameters: DeleteImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImageRequest().'
            );
        }

        if (requestParameters['deleteImageRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteImageRequest',
                'Required parameter "deleteImageRequest" was null or undefined when calling deleteImageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/imageRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteImageRequestToJSON(requestParameters['deleteImageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an image request
     */
    async deleteImageRequest(requestParameters: DeleteImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImageRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific image request
     */
    async getImageRequestByIdRaw(requestParameters: GetImageRequestByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadImageRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImageRequestById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/imageRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageRequestFromJSON(jsonValue));
    }

    /**
     * Get a specific image request
     */
    async getImageRequestById(requestParameters: GetImageRequestByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadImageRequest> {
        const response = await this.getImageRequestByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all image requests
     */
    async getImageRequestsRaw(requestParameters: GetImageRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReadImageRequest>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['requestedAt'] != null) {
            queryParameters['requestedAt'] = requestParameters['requestedAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/imageRequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReadImageRequestFromJSON));
    }

    /**
     * Get all image requests
     */
    async getImageRequests(requestParameters: GetImageRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReadImageRequest>> {
        const response = await this.getImageRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an image request
     */
    async updateImageRequestRaw(requestParameters: UpdateImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadImageRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateImageRequest().'
            );
        }

        if (requestParameters['updateImageRequest'] == null) {
            throw new runtime.RequiredError(
                'updateImageRequest',
                'Required parameter "updateImageRequest" was null or undefined when calling updateImageRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/imageRequests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateImageRequestToJSON(requestParameters['updateImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageRequestFromJSON(jsonValue));
    }

    /**
     * Update an image request
     */
    async updateImageRequest(requestParameters: UpdateImageRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadImageRequest> {
        const response = await this.updateImageRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
