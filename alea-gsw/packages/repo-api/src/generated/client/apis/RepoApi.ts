/* tslint:disable */
/* eslint-disable */
/**
 * Repo Service
 * Selfhost Api for git repo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetCommits200ResponseInner,
  GetObcConfig200Response,
} from '../models/index.js';
import {
    GetCommits200ResponseInnerFromJSON,
    GetCommits200ResponseInnerToJSON,
    GetObcConfig200ResponseFromJSON,
    GetObcConfig200ResponseToJSON,
} from '../models/index.js';

export interface GetBranchCommitsRequest {
    branchName: string;
    limit?: number;
    offset?: number;
}

export interface GetCommitsRequest {
    limit?: number;
    offset?: number;
}

export interface GetFileRequest {
    commitHash: string;
    filePath: string;
}

export interface GetObcConfigRequest {
    commitHash: string;
}

export interface GetObcGrpcServiceRequest {
    commitHash: string;
    includeTestSpec?: boolean;
}

export interface GetObcProtoRequest {
    commitHash: string;
    includeTestSpec?: boolean;
}

/**
 * 
 */
export class RepoApi extends runtime.BaseAPI {

    /**
     * Get commits for a branch
     */
    async getBranchCommitsRaw(requestParameters: GetBranchCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCommits200ResponseInner>>> {
        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling getBranchCommits().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/branches/{branchName}/commits`.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCommits200ResponseInnerFromJSON));
    }

    /**
     * Get commits for a branch
     */
    async getBranchCommits(requestParameters: GetBranchCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCommits200ResponseInner>> {
        const response = await this.getBranchCommitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all branches
     */
    async getBranchesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/branches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all branches
     */
    async getBranches(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getBranchesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all commits
     */
    async getCommitsRaw(requestParameters: GetCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCommits200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCommits200ResponseInnerFromJSON));
    }

    /**
     * Get all commits
     */
    async getCommits(requestParameters: GetCommitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCommits200ResponseInner>> {
        const response = await this.getCommitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a file from a commit
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['commitHash'] == null) {
            throw new runtime.RequiredError(
                'commitHash',
                'Required parameter "commitHash" was null or undefined when calling getFile().'
            );
        }

        if (requestParameters['filePath'] == null) {
            throw new runtime.RequiredError(
                'filePath',
                'Required parameter "filePath" was null or undefined when calling getFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commits/{commitHash}/file`.replace(`{${"commitHash"}}`, encodeURIComponent(String(requestParameters['commitHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get a file from a commit
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the OBC config from a commit
     */
    async getObcConfigRaw(requestParameters: GetObcConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetObcConfig200Response>> {
        if (requestParameters['commitHash'] == null) {
            throw new runtime.RequiredError(
                'commitHash',
                'Required parameter "commitHash" was null or undefined when calling getObcConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commits/{commitHash}/obc-config`.replace(`{${"commitHash"}}`, encodeURIComponent(String(requestParameters['commitHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetObcConfig200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the OBC config from a commit
     */
    async getObcConfig(requestParameters: GetObcConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetObcConfig200Response> {
        const response = await this.getObcConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the gRPC service for OBC config from a commit
     */
    async getObcGrpcServiceRaw(requestParameters: GetObcGrpcServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['commitHash'] == null) {
            throw new runtime.RequiredError(
                'commitHash',
                'Required parameter "commitHash" was null or undefined when calling getObcGrpcService().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeTestSpec'] != null) {
            queryParameters['includeTestSpec'] = requestParameters['includeTestSpec'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commits/{commitHash}/obc-grpc-service`.replace(`{${"commitHash"}}`, encodeURIComponent(String(requestParameters['commitHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the gRPC service for OBC config from a commit
     */
    async getObcGrpcService(requestParameters: GetObcGrpcServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getObcGrpcServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Proto File for OBC config from a commit
     */
    async getObcProtoRaw(requestParameters: GetObcProtoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['commitHash'] == null) {
            throw new runtime.RequiredError(
                'commitHash',
                'Required parameter "commitHash" was null or undefined when calling getObcProto().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeTestSpec'] != null) {
            queryParameters['includeTestSpec'] = requestParameters['includeTestSpec'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commits/{commitHash}/obc-proto`.replace(`{${"commitHash"}}`, encodeURIComponent(String(requestParameters['commitHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the Proto File for OBC config from a commit
     */
    async getObcProto(requestParameters: GetObcProtoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getObcProtoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
